{
  "repository": "ethereum/solidity",
  "retrieved_at": "2025-04-16T20:47:01.085387Z",
  "tags": [
    {
      "name": "v0.8.29",
      "sha": "ab55807c0d9198fb126442188d40fcab292a2acb"
    },
    {
      "name": "v0.8.28",
      "sha": "7893614a31fbeacd1966994e310ed4f760772658"
    },
    {
      "name": "v0.8.27",
      "sha": "40a35a097cb1e03550c7ce415f2b46ad81e882a6"
    },
    {
      "name": "v0.8.26",
      "sha": "8a97fa7a1db1ec509221ead6fea6802c684ee887"
    },
    {
      "name": "v0.8.25",
      "sha": "b61c2a91b3a478bd53fb831b0e8811668bc0dd05"
    },
    {
      "name": "v0.8.24",
      "sha": "e11b9ed9f2c254bc894d844c0a64a0eb76bbb4fd"
    },
    {
      "name": "v0.8.23",
      "sha": "f704f362dbb2a0af54d1484eb50cdafbc7dc086d"
    },
    {
      "name": "v0.8.22",
      "sha": "4fc1097e8df32897ccee8985019610fa5a869212"
    },
    {
      "name": "v0.8.21",
      "sha": "d9974bed7134e043f7ccc593c0c19c67d2d45dc4"
    },
    {
      "name": "v0.8.20",
      "sha": "a1b79de64235f13e6b06e088fe6365c5a12d13d3"
    },
    {
      "name": "v0.8.19",
      "sha": "7dd6d404815651b2341ecae220709a88aaed4038"
    },
    {
      "name": "v0.8.18",
      "sha": "87f61d960cceab32489350726a99c050e6f92c61"
    },
    {
      "name": "v0.8.17",
      "sha": "8df45f5f8632da4817bc7ceb81497518f298d290"
    },
    {
      "name": "v0.8.16",
      "sha": "07a7930e73f57ce6ed1c6f0b8dd9aad99e5c3692"
    },
    {
      "name": "v0.8.15",
      "sha": "e14f27147bd4ffc63e2bf46a68e0d271fad0ed79"
    },
    {
      "name": "v0.8.14",
      "sha": "80d49f37028b13e162951b6b67b0a42f477ba93c"
    },
    {
      "name": "v0.8.13",
      "sha": "abaa5c0eb321aab4cd09617598696172378a4b83"
    },
    {
      "name": "v0.8.12",
      "sha": "f00d7308415b5f1e66b7dca11ef0edb395c09ad4"
    },
    {
      "name": "v0.8.11",
      "sha": "d7f0394316b84421d897671df1173cf01c641160"
    },
    {
      "name": "v0.8.10",
      "sha": "fc4108302703fe8bb7cb2443c45a5c172c8e0f11"
    },
    {
      "name": "v0.8.9",
      "sha": "e5eed63a3e83d698d8657309fd371248945a1cda"
    },
    {
      "name": "v0.8.8",
      "sha": "dddeac2faf1e2d3527a85f8a308138d0b27af297"
    },
    {
      "name": "v0.8.7",
      "sha": "e28d00a76daa0747f00ffe47cea17862bca55771"
    },
    {
      "name": "v0.8.6",
      "sha": "11564f7ec2d34f488e7f7946c1f19491a967370e"
    },
    {
      "name": "v0.8.5",
      "sha": "a4f2e591fe55900f86ab72fad37d03af7dfa638e"
    },
    {
      "name": "v0.8.4",
      "sha": "c7e474f243fa6bd6d6c172118b95d52113b5fbad"
    },
    {
      "name": "v0.8.3",
      "sha": "8d00100c4e9d211830a5dbf6a1f964d98648480d"
    },
    {
      "name": "v0.8.2",
      "sha": "661d11035b871aa1624bf568e3d476ef1bf25895"
    },
    {
      "name": "v0.8.1",
      "sha": "df193b15c2dfb4ea10b2c2fb4c2baea953edb138"
    },
    {
      "name": "v0.8.0",
      "sha": "c7dfd78e57c5ad7abd485dc1cc13d8f0ab09d431"
    }
  ],
  "releases": [
    {
      "tag_name": "v0.8.29",
      "published_at": "2025-03-12T07:38:31Z",
      "body": "Introducing the newest version of the Solidity Compiler!\r\n\r\nWe are excited to announce the release of the Solidity Compiler [v0.8.29](https://soliditylang.org/blog/2025/03/12/solidity-0.8.29-release-announcement/).\r\n\r\nThis latest version of the compiler brings support for EVM Object Format (experimental), Storage Layout Specifiers, and more! \r\n\r\n## Changelog\r\n\r\n### Language Features:\r\n * Allow relocating contract storage to an arbitrary location.\r\n\r\n\r\n### Compiler Features:\r\n * Error Reporting: Errors reported during code generation now point at the location of the contract when more fine-grained location is not available.\r\n * ethdebug: Experimental support for instructions and source locations.\r\n * EVM: Support for the EVM version \"Osaka\".\r\n * EVM Assembly Import: Allow enabling opcode-based optimizer.\r\n * General: The experimental EOF backend implements a subset of EOF sufficient to compile arbitrary high-level Solidity syntax via IR with optimization enabled.\r\n * SMTChecker: Support ``block.blobbasefee`` and ``blobhash``.\r\n * SMTChecker: The option ``--model-checker-print-query`` no longer requires ``--model-checker-solvers smtlib2``.\r\n * SMTChecker: Z3 is now a runtime dependency, not a build dependency (except for emscripten build).\r\n * Yul Parser: Make name clash with a builtin a non-fatal error.\r\n\r\n\r\n### Bugfixes:\r\n * Commandline Interface: Report StackTooDeep errors in compiler mode as proper errors instead of printing diagnostic information meant for internal compiler errors.\r\n * Error Reporting: Fix error locations not being shown for source files with empty names.\r\n * General: Fix internal compiler error when requesting IR AST outputs for interfaces and abstract contracts.\r\n * Metadata: Fix custom cleanup sequence missing from metadata when other optimizer settings have default values.\r\n * SMTChecker: Fix internal compiler error when analyzing overflowing expressions or bitwise negation of unsigned types involving constants.\r\n * SMTChecker: Fix reporting on targets that are safe in the context of one contract but unsafe in the context of another contract.\r\n * SMTChecker: Fix SMT logic error when analyzing cross-contract getter call with BMC.\r\n * SMTChecker: Fix SMT logic error when contract deployment involves string literal to fixed bytes conversion.\r\n * SMTChecker: Fix SMT logic error when external call has extra effectless parentheses.\r\n * SMTChecker: Fix SMT logic error when initializing a fixed-sized-bytes array using string literals.\r\n * SMTChecker: Fix SMT logic error when translating invariants involving array store and select operations.\r\n * SMTChecker: Fix wrong encoding of string literals as arguments of ``ecrecover`` precompile.\r\n * Standard JSON Interface: Fix ``generatedSources`` and ``sourceMap`` being generated internally even when not requested.\r\n * TypeChecker: Fix spurious compilation errors due to incorrect computation of contract storage size which erroneously included transient storage variables.\r\n * Yul: Fix internal compiler error when a code generation error should be reported instead.\r\n * Yul Optimizer: Fix failing debug assertion due to dereferencing of an empty ``optional`` value.\r\n\r\n\r\n### Build system:\r\n * Linux release builds are fully static again and no longer depend on ``glibc``.\r\n * Switch from C++17 to C++20 as the target standard.\r\n\r\n\r\n### Solc-Js:\r\n * The wrapper now requires at least nodejs v12.\r\n\r\nWe would especially like to thank all the contributors that made this release possible:\r\nAlexander Arlt, chloefeal, clonker, comfsrt, Cypher Pepe, Daniel Kirchner, DaniPopes, dxsullivan, ericlehong, Fallengirl, flylai, FT, fuder.eth, Gaetan Lepage, gmh5225, haoyang9804, Hopium, Igor \u017buk, imilygathia, irreduciblen, Jeff Wentworth, Kamil \u015aliwak, kilavvy, leopardracer, Marco, Martin Blicha, Matheus Aguiar, Maxim Evtush, monem, Nikola Mati\u0107, Noisy, piguagua, PixelPilot, planetBoy, r0qs, RiceChuan, rodiazet, Rudko Hanna, santamasa, Sebastian Miasojed, Skyge, Skylar Ray, sukey2008, Tran Quang Loc, Ustas, Vishwa Mehta, xiaobei0715, XxAlex74xX"
    },
    {
      "tag_name": "v0.8.28",
      "published_at": "2024-10-09T06:37:53Z",
      "body": "Introducing the newest version of the Solidity Compiler!\r\n\r\nWe are excited to announce the release of the Solidity Compiler [Solidity v0.8.28](https://soliditylang.org/blog/2024/10/09/solidity-0.8.28-release-announcement). This is going to be a fairly small release compared to the last one - but an important nonetheless, as we're finally releasing high level language support for transient storage, although at this time, only transient storage state variables of value types are supported. We will of course be working on bringing full support (reference types) in the upcoming releases.\r\n\r\n## Changelog\r\n\r\n### Language Features:\r\n * Transient storage state variables of value types are now fully supported.\r\n\r\n\r\n### Compiler Features:\r\n * General: Generate JSON representations of Yul ASTs only on demand to reduce memory usage.\r\n * Standard JSON Interface: Bytecode or IR can now be requested for a subset of all contracts without triggering unnecessary code generation for other contracts.\r\n\r\n\r\n### Bugfixes:\r\n * SMTChecker: Fix SMT logic error when assigning to an array of addresses.\r\n * Yul AST: Fix shifted native source locations when debug info selection included code snippets.\r\n\r\n\r\n### Build system:\r\n* Removed ``USE_LD_GOLD`` option and default to use the compiler default linker. For custom linkers, ``CMAKE_CXX_FLAGS`` can be used.\r\n\r\nWe would especially like to thank all the contributors that made this release possible:\r\nAlexander Arlt, Anandu Raveendran, backbonexe, clonker, Daniel Kirchner, Elias Rad, Franco Victorio, Kamil \u015aliwak, Martin Blicha, Matheus Aguiar, Nikola Mati\u0107, Pawel Gebal, r0qs, rodiazet, Vishwa Mehta"
    },
    {
      "tag_name": "v0.8.27",
      "published_at": "2024-09-04T08:35:00Z",
      "body": "Introducing the newest version of the Solidity Compiler!\r\n\r\nWe are excited to announce the release of the Solidity Compiler [Solidity v0.8.27](https://soliditylang.org/blog/2024/09/04/solidity-0.8.27-release-announcement). We've got some exciting new features this time around as well - likely the most anticipated being the support for require with custom errors in the legacy pipeline, which was previously only supported with via IR. On the topic of via IR, we have also made some efficiency improvements with regards to compilation times, namely the caching of already optimized IR, and the re-use thereof. Apart from these, we've also fixed quite a few bugs, added some minor convenience features, and are continuing our work on high-level transient storage support.\r\n\r\n## Changelog\r\n\r\n### Language Features:\r\n * Accept declarations of state variables with ``transient`` data location (parser support only, no code generation yet).\r\n * Make ``require(bool, Error)`` available when using the legacy pipeline.\r\n * Yul: Parsing rules for source location comments have been relaxed: Whitespace between the location components as well as single-quoted code snippets are now allowed.\r\n\r\n### Compiler Features:\r\n * Commandline Interface: Add ``--transient-storage-layout`` output.\r\n * Commandline Interface: Allow the use of ``--asm-json`` output option in assembler mode to export EVM assembly of the contracts in JSON format.\r\n * Commandline Interface: Do not perform IR optimization when only unoptimized IR is requested.\r\n * Constant Optimizer: Uses ``PUSH0`` if supported by the selected evm version.\r\n * Error Reporting: Unimplemented features are now properly reported as errors instead of being handled as if they were bugs.\r\n * EVM: Support for the EVM version \"Prague\".\r\n * Peephole Optimizer: ``PUSH0``, when supported, is duplicated explicitly instead of using ``DUP1``.\r\n * Peephole Optimizer: Remove identical code snippets that terminate the control flow if they occur one after another.\r\n * SMTChecker: Add CHC engine check for underflow and overflow in unary minus operation.\r\n * SMTChecker: Replace CVC4 as a possible BMC backend with cvc5.\r\n * Standard JSON Interface: Add ``transientStorageLayout`` output.\r\n * Standard JSON Interface: Do not perform IR optimization when only unoptimized IR is requested.\r\n * Yul: Drop the deprecated typed Yul dialect that was only accessible via ``--yul`` in the CLI.\r\n * Yul: The presence of types in untyped Yul dialects is now a parser error.\r\n * Yul Optimizer: Caching of optimized IR to speed up optimization of contracts with bytecode dependencies.\r\n * Yul Optimizer: The optimizer now treats some previously unrecognized identical literals as identical.\r\n\r\n### Bugfixes:\r\n * Assembler: Fix ICE caused by imprecise calculation of required size of tags in bytecode when code size is above 255.\r\n * Parser: Fix spuriously emitted parser error for unary plus operations when used as binary operator in some cases.\r\n * SMTChecker: Fix error that reports invalid number of verified checks for BMC and CHC engines.\r\n * SMTChecker: Fix formatting of unary minus expressions in invariants.\r\n * SMTChecker: Fix internal compiler error when reporting proved targets for BMC engine.\r\n * SMTChecker: Fix SMT logic error when assigning to an array of contracts or functions.\r\n * Standard JSON Interface: For Yul input, properly produce output artifacts in case of warnings.\r\n * TypeChecker: Fix segfault when assigning nested tuple to tuple.\r\n * Yul IR Code Generation: Deterministic order of Yul subobjects.\r\n * Yul Optimizer: Fix Yul source locations always referring to unoptimized source, even in optimized outputs.\r\n * Yul Optimizer: Fix warnings being generated twice when there are no errors.\r\n * Yul Optimizer: Name simplification could lead to forbidden identifiers with a leading and/or trailing dot, e.g., ``x._`` would get simplified into ``x.``.\r\n * Yul Parser: Fix segfault when parsing very long location comments.\r\n\r\n### Build System:\r\n * Change build system to use git submodules for some dependencies (nlohmann-json, fmtlib & range-v3).\r\n\r\n\r\nWe especially thank all the contributors that made this release possible:\r\nAlex Beregszaszi, Alexander Arlt, Alireza Arjmand, Ardis Lu, Bhargava Shastry, Daniel Kirchner, Daniel Zahariev, Francisco Giordano, Guilherme Ferreira, Haoyang Ma, Howe, Ikko Eltociear Ashimine, Kaan Uzdo\u011fan, Kamil \u015aliwak, Martin Blicha, Matheus Aguiar, Meet Mangukiya, Moritz Hoffmann, Nikola Mati\u0107, Pawel Gebal, Tilak Madichetti, ToonVanHove, Vishwa Mehta, Zuri Obozuwa, dxo, ljmanini, r0qs, rodiazet, shafu, snoppy\r\n"
    },
    {
      "tag_name": "v0.8.26",
      "published_at": "2024-05-21T09:23:51Z",
      "body": "Introducing the newest version of the Solidity Compiler!\r\n\r\nWe are excited to announce the release of the Solidity Compiler [Solidity v0.8.26](https://soliditylang.org/blog/2024/05/21/solidity-0.8.26-release-announcement). This release brings some exciting new features, namely a much faster default optimizer sequence for the via IR pipeline, which cuts the compilation times significantly. We are introducing usage of `require` functions with custom errors, at this time for the via IR pipeline only, in addition to an optimization for reverting with errors of small static encoding sizes, which should now have lower gas costs. As always, there are multiple small bugfixes to go with the release.\r\n\r\n## Changelog\r\n\r\n### Language Features:\r\n * Introduce a new overload ``require(bool, Error)`` that allows usage of ``require`` functions with custom errors. This feature is available in the ``via-ir`` pipeline only.\r\n\r\n### Compiler Features:\r\n * SMTChecker: Create balance check verification target for CHC engine.\r\n * Yul IR Code Generation: Cheaper code for reverting with errors of a small static encoding size.\r\n * Yul Optimizer: New, faster default optimizer step sequence.\r\n\r\n### Bugfixes:\r\n * Commandline Interface: Fix ICE when the optimizer is disabled and an empty/blank string is used for ``--yul-optimizations`` sequence.\r\n * SMTChecker: Fix false positive when comparing hashes of same array or string literals.\r\n * SMTChecker: Fix internal error on mapping access caused by too strong requirements on sort compatibility of the index and mapping domain.\r\n * SMTChecker: Fix internal error when using an empty tuple in a conditional operator.\r\n * SMTChecker: Fix internal error when using bitwise operators with an array element as argument.\r\n * Standard JSON Interface: Fix ICE when the optimizer is disabled and an empty/blank string is used for ``optimizerSteps`` sequence.\r\n * StaticAnalyzer: Only raise a compile time error for division and modulo by zero when it's between literals.\r\n * TypeChecker: Fix compiler crash when the left-hand side of an assignment was a parenthesized non-tuple expression of a tuple type.\r\n * Yul Optimizer: Fix optimizer executing each repeating part of the step sequence at least twice, even if the code size already became stable after the first iteration.\r\n * Yul Optimizer: Fix the order of assignments generated by ``SSATransform`` being dependent on AST IDs, sometimes resulting in different (but equivalent) bytecode when unrelated files were added to the compilation pipeline.\r\n\r\n### Build System:\r\n* Replace internal JSON library jsoncpp with nlohmann::json.\r\n\r\nWe especially thank all the contributors that made this release possible:\r\nAlex Beregszaszi, Alexander Arlt, Ardis Lu, Daniel Kirchner, InventiveCoder, Juliano Penna, Kamil \u015aliwak, Martin Blicha, Matheus Aguiar, Moritz Hoffmann, Nikola Mati\u0107, Patrick Collins, Pawel Gebal, Snoppy, Tamas Molnar, Vc, Vijay Raj Panchal, Zuri Obozuwa, edurivara, hanghuge, hydai, looklose, pcw109550, r0qs, wilsoncusack, zo9999"
    },
    {
      "tag_name": "v0.8.25",
      "published_at": "2024-03-14T11:30:42Z",
      "body": "Introducing the newest version of the Solidity Compiler!\r\n\r\nWe are excited to announce the release of the Solidity Compiler [Solidity v0.8.25](https://soliditylang.org/blog/2024/03/14/solidity-0.8.25-release-announcement). This release is a small one, and is mainly centered around the Dencun hard-fork that occurred yesterday. On that note, the default EVM version in the compiler is now ``cancun``, and we've also introduced some gas savings via better exploitation of the ``MCOPY`` opcode, as well fixing an issue that could result in larger than necessary bytecode.\r\n\r\n## Changelog\r\n\r\n### Compiler Features:\r\n * Code Generator: Use ``MCOPY`` instead of ``MLOAD``/``MSTORE`` loop when copying byte arrays.\r\n * EVM: Set default EVM version to ``cancun``.\r\n * Yul Analyzer: Emit transient storage warning only for the first occurrence of ``tstore``.\r\n\r\n\r\n### Bugfixes:\r\n * Assembler: Prevent incorrect calculation of tag sizes.\r\n * Commandline Interface: Do not run IR pipeline when ``--via-ir`` is used but no output that depends on the IR is requested.\r\n * EVM Assembly Import: Fix handling of missing source locations during import.\r\n * SMTChecker: Ensure query is properly flushed to a file before calling solver when using SMT-LIB interface.\r\n * SMTChecker: Fix internal error caused by not respecting the sign of an integer type when constructing zero-value SMT expressions.\r\n * SMTChecker: Run Eldarica only when explicitly requested with `--model-checker-solvers eld`, even when it is present on the system.\r\n\r\n\r\nWe especially thank all the contributors that made this release possible:\r\nAditya Kode, Alexander Arlt, Bhargava Shastry, ByeongSu Go, Chomtana, Cyrus, Daniel Kirchner, Dimitris Apostolou, Jeason, Kamil \u015aliwak, Martin Blicha, Matheus Aguiar, Nikola Mati\u0107, Saw-mon & Natalie, Simon Perriard, Twice, Vishwa Mehta, Vojtch, minaminao, omahs, pgebal, r0qs, racerol\r\n\r\n**UPDATE 2024-03-14**: The MacOS universal binary originally included here has been rebuilt and replaced due to a missing signature which made it unusable.\r\n\r\nThe SHA-256 hash of the old binary was `ce09577e654628c2b4d00e66bcab7c8a4dc18c1d9812dcbab7bd8572a6d4d27e`. The new one is `cc3f94a70ac681b0304084acc1980aabe2a1bb3240d44ce76a8df0e1e77a2110`."
    },
    {
      "tag_name": "v0.8.24",
      "published_at": "2024-01-25T10:28:00Z",
      "body": "Introducing the newest version of the Solidity Compiler!\r\n\r\nWe are excited to announce the release of the Solidity Compiler [Solidity v0.8.24](https://soliditylang.org/blog/2024/01/26/solidity-0.8.24-release-announcement). This newest version of the compiler brings readiness for the \"Cancun\" network upgrade, including support for transient storage (EIP-1153), shard blob transactions (EIP-4844), & more. The release binaries for macOS are now also compatible with Apple Silicon chips.\r\n\r\n## Notable Features\r\n\r\n* Support for transient storage for inline assembly (EIP-1153)\r\n* Support for BLOBBASEFEE (EIP-7516)\r\n* Support for MCOPY (EIP-5656)\r\n* Changes in SELFDESTRUCT Behavior (EIP-6780)\r\n* Support for Apple Silicon\r\n\r\n## Changelog\r\n\r\n### Language Features\r\n\r\n * Introduce global ``block.blobbasefee`` for retrieving the blob base fee of the current block.\r\n * Introduce global function ``blobhash(uint)`` for retrieving versioned hashes of blobs, akin to the homonymous Yul builtin.\r\n * Yul: Introduce builtin ``blobbasefee()`` for retrieving the blob base fee of the current block.\r\n * Yul: Introduce builtin ``blobhash()`` for retrieving versioned hashes of blobs associated with the transaction.\r\n * Yul: Introduce builtin ``mcopy()`` for cheaply copying data between memory areas.\r\n * Yul: Introduce builtins ``tload()`` and ``tstore()`` for transient storage access.\r\n\r\n### Compiler Features\r\n\r\n* EVM: Support for the EVM Version \"Cancun\".\r\n* SMTChecker: Support `bytes.concat` except when string literals are passed as arguments.\r\n* Standard JSON Interface: Add experimental support to import EVM assembly in the format used by ``--asm-json``.\r\n* TypeChecker: Comparison of internal function pointers now yields a warning, as it can produce unexpected results with the legacy pipeline enabled.\r\n\r\n### Bugfixes:\r\n\r\n * AST import: Fix bug when importing inline assembly with empty ``let`` variable  declaration.\r\n \r\nWe especially thank all the contributors that made this release possible:\r\nAlexander Arlt, Bhargava Shastry, Daniel Kirchner, GoodDaisy, Jitendra Kumar, Kamil \u015aliwak, Matheus Aguiar, Nikola Mati\u0107, Qi He, Sukey, Vishwa Mehta, pgebal, r0qs, xiaolou86."
    },
    {
      "tag_name": "v0.8.23",
      "published_at": "2023-11-08T12:20:36Z",
      "body": "Introducing the newest version of the Solidity Compiler!\r\nWe are excited to announce the latest release of the Solidity Compiler, [Solidity v0.8.23](https://soliditylang.org/blog/2023/11/08/solidity-0.8.23-release-announcement).\r\n\r\n### Changelog\r\n\r\nImportant Bugfixes:\r\n * Optimizer: Fix block deduplicator bug which led to blocks which are identical apart from the contents of ``verbatim`` instructions to be treated as equivalent and thus collapsed into a single one.\r\n\r\nCompiler Features:\r\n * Commandline Interface: An empty ``--yul-optimizations`` sequence can now be always provided.\r\n * Standard JSON Interface: An empty ``optimizerSteps`` sequence can now always be provided.\r\n\r\nWe especially thank all the contributors that made this release possible:\r\nDaniel Kirchner, Kamil \u015aliwak, Markus Osterlund / robriks, Matheus Aguiar, Nikola Mati\u0107, Nuzair"
    },
    {
      "tag_name": "v0.8.22",
      "published_at": "2023-10-25T10:40:08Z",
      "body": "Introducing the newest version of the Solidity Compiler!\r\nWe are excited to announce the latest release of the Solidity Compiler, [Solidity v0.8.22](https://soliditylang.org/blog/2023/10/25/solidity-0.8.22-release-announcement).\r\n\r\n**IMPORTANT NOTE:**\r\nThis release deprecates support for EVM versions older than Constantinople for the reason of ruling out the need to maintain multiple complex code paths or workarounds for ancient EVM versions. In case you rely on the support for such EVM versions, please reach out to us.\r\n\r\nNotable Features:\r\n\r\n* Unchecked loop increments\r\n* Adding support for importing EVM Assembly JSON (experimental)\r\n* Adjusting Yul optimizer to rematerialize zero literals\r\n\r\n### Changelog\r\n\r\nLanguage Features:\r\n\r\n * Allow defining events at file level.\r\n\r\nCompiler Features:\r\n\r\n* Code Generator: Remove redundant overflow checks of certain `for` loops when the counter variable cannot overflow.\r\n* Commandline Interface: Add `--no-import-callback` option that prevents the compiler from loading source files not given explicitly on the CLI or in Standard JSON input.\r\n* Commandline Interface: Add an experimental `--import-asm-json` option that can import EVM assembly in the format used by `--asm-json`.\r\n* Commandline Interface: Use proper severity and coloring also for error messages produced outside of the compilation pipeline.\r\n* EVM: Deprecate support for \"homestead\", \"tangerineWhistle\", \"spuriousDragon\" and \"byzantium\" EVM versions.\r\n* Parser: Remove the experimental error recovery mode (`--error-recovery` / `settings.parserErrorRecovery`).\r\n* SMTChecker: Support user-defined operators.\r\n* Yul Optimizer: If `PUSH0` is supported, favor zero literals over storing zero values in variables.\r\n* Yul Optimizer: Run the `Rematerializer` and `UnusedPruner` steps at the end of the default clean-up sequence.\r\n\r\nBugfixes:\r\n\r\n* Code Generator: Fix output from via-IR code generator being dependent on which files were discovered by import callback. In some cases, a different AST ID assignment would alter the order of functions in internal dispatch, resulting in superficially different but semantically equivalent bytecode.\r\n* NatSpec: Fix internal error when requesting `userdoc` or `devdoc` for a contract that emits an event defined in a foreign contract or interface.\r\n* SMTChecker: Fix encoding error that causes loops to unroll after completion.\r\n* SMTChecker: Fix inconsistency on constant condition checks when `while` or `for` loops are unrolled before the condition check.\r\n* Yul Optimizer: Fix replacement decisions during CSE being affected by Yul variable names generated by the compiler, resulting in different (but equivalent) bytecode in some situations.\r\n \r\n AST Changes:\r\n\r\n * AST: Fix wrong initial ID for Yul nodes in the AST.\r\n \r\nWe especially thank all the contributors that made this release possible:\r\nAlejandro Criado-P\u00e9rez, Alexander Arlt, Bhargava Shastry, Daniel, Jun Zhang, Kamil \u015aliwak, Leo, Martin Blicha, Matheus Aguiar, Nikola Mati\u0107, Paul Wackerow, Pawel Gebal, Saw-mon & Natalie, Zach Obront, franzihei, omahs, pgebal, r0qs, shalaamum"
    },
    {
      "tag_name": "v0.8.21",
      "published_at": "2023-07-19T08:57:55Z",
      "body": "Introducing the newest version of the Solidity Compiler!\r\nWe are excited to announce the latest release of the Solidity Compiler, [Solidity v0.8.21](https://soliditylang.org/blog/2023/07/19/solidity-0.8.21-release-announcement/). \r\n\r\n### Changelog\r\n\r\nImportant Bugfixes:\r\n * Code Generator: Always generate code for the expression in ``<expression>.selector`` in the legacy code generation pipeline.\r\n * Yul Optimizer: Fix ``FullInliner`` step (``i``) not preserving the evaluation order of arguments passed into inlined functions in code that is not in expression-split form (i.e. when using a custom optimizer sequence in which the step not preceded by ``ExpressionSplitter`` (``x``)).\r\n\r\n\r\nLanguage Features:\r\n * Allow qualified access to events from other contracts.\r\n * Relax restrictions on initialization of immutable variables. Reads and writes may now happen at any point at construction time outside of functions and modifiers. Explicit initialization is no longer mandatory.\r\n\r\n\r\nCompiler Features:\r\n * Commandline Interface: Add ``--ast-compact-json`` output in assembler mode.\r\n * Commandline Interface: Add ``--ir-ast-json`` and ``--ir-optimized-ast-json`` outputs for Solidity input, providing AST in compact JSON format for IR and optimized IR.\r\n * Commandline Interface: Respect ``--optimize-yul`` and ``--no-optimize-yul`` in compiler mode and accept them in assembler mode as well. ``--optimize --no-optimize-yul`` combination now allows enabling EVM assembly optimizer without enabling Yul optimizer.\r\n * EWasm: Remove EWasm backend.\r\n * Parser: Introduce ``pragma experimental solidity``, which will enable an experimental language mode that, in particular, has no stability guarantees between non-breaking releases and is not suited for production use.\r\n * SMTChecker: Add ``--model-checker-print-query`` CLI option and ``settings.modelChecker.printQuery`` JSON option to output the SMTChecker queries in the SMTLIB2 format. This requires using ``smtlib2`` solver only.\r\n * Standard JSON Interface: Add ``ast`` file-level output for Yul input.\r\n * Standard JSON Interface: Add ``irAst`` and ``irOptimizedAst`` contract-level outputs for Solidity input, providing AST in compact JSON format for IR and optimized IR.\r\n * Yul Optimizer: Remove experimental ``ReasoningBasedSimplifier`` optimization step.\r\n * Yul Optimizer: Stack-to-memory mover is now enabled by default whenever possible for via IR code generation and pure Yul compilation.\r\n\r\n\r\nBugfixes:\r\n * Code Generator: Disallow complex expressions whose results are types, built-ins, modules or some unassignable functions. The legacy code generation pipeline would not actually evaluate them, discarding any side effects they might have.\r\n * Code Generator: Fix not entirely deterministic order of functions in unoptimized Yul output. The choice of C++ compiler in some cases would result in different (but equivalent) bytecode (especially from native binaries vs emscripten binaries).\r\n * Commandline Interface: Fix internal error when using ``--stop-after parsing`` and requesting some of the outputs that require full analysis or compilation.\r\n * Commandline Interface: It is no longer possible to specify both ``--optimize-yul`` and ``--no-optimize-yul`` at the same time.\r\n * SMTChecker: Fix encoding of side-effects inside ``if`` and ``ternary conditional``statements in the BMC engine.\r\n * SMTChecker: Fix false negative when a verification target can be violated only by a trusted external call from another public function.\r\n * SMTChecker: Fix generation of invalid SMT-LIB2 scripts in BMC engine with trusted mode for external calls when CHC engine times out.\r\n * SMTChecker: Fix internal error caused by incorrectly classifying external function call using function pointer as a public getter.\r\n * SMTChecker: Fix internal error caused by using external identifier to encode member access to functions that take an internal function as a parameter.\r\n * Standard JSON Interface: Fix an incomplete AST being returned when analysis is interrupted by certain kinds of fatal errors.\r\n * Type Checker: Disallow using certain unassignable function types in complex expressions.\r\n * Type Checker: Function declaration types referring to different declarations are no longer convertible to each other.\r\n * Yul Optimizer: Ensure that the assignment of memory slots for variables moved to memory does not depend on AST IDs that may depend on whether additional files are included during compilation.\r\n * Yul Optimizer: Fix ``FullInliner`` step not ignoring code that is not in expression-split form.\r\n * Yul Optimizer: Fix optimized IR being unnecessarily passed through the Yul optimizer again before bytecode generation.\r\n\r\n\r\nAST Changes:\r\n * AST: Add the ``experimentalSolidity`` field to the ``SourceUnit`` nodes, which indicates whether the experimental parsing mode has been enabled via ``pragma experimental solidity``.\r\n\r\nWe especially thank all the contributors that made this release possible:\r\n\r\nAlejandro Criado-P\u00e9rez, Alexander Arlt, Alexandre Ferreira, Bhargava Shastry, Cliff Syner, Daniel Kirchner, David Bar-On, GiokaMarkella, Jun Zhang, Kaan Uzdo\u011fan, Kamil \u015aliwak, Leo Alt, Martin Blicha, Matheus Aguiar, Nikola Mati\u0107, Nuno Santos, Paul Wackerow, Pawel Gebal, johnnygee19, minaminao, r0qs\r\n"
    },
    {
      "tag_name": "v0.8.20",
      "published_at": "2023-05-10T11:21:23Z",
      "body": "Introducing the newest version of the Solidity Compiler!\r\nWe are excited to announce the latest release of the Solidity Compiler, [Solidity v0.8.20](https://soliditylang.org/blog/2023/05/10/solidity-0.8.20-release-announcement/). \r\nThis latest version includes a range of improvements and, most importantly, support for Shanghai!\r\nIt also contains performance improvements in the via-IR pipeline and improves the list of events exposed in the contract ABI.\r\n\r\n**IMPORTANT NOTE:** This compiler switches the **default** target EVM version to Shanghai, which means that the generated bytecode will include ``PUSH0`` opcodes. Be sure to select the appropriate EVM version in case you intend to deploy on a chain other than mainnet like L2 chains that may not yet support ``PUSH0``, otherwise deployment of your contracts will fail.\r\n\r\n### Changelog\r\n\r\n**Compiler Features:**\r\n * Assembler: Use ``push0`` for placing ``0`` on the stack for EVM versions starting from \"Shanghai\". This decreases the deployment and runtime costs.\r\n * EVM: Set default EVM version to \"Shanghai\".\r\n * EVM: Support for the EVM Version \"Shanghai\".\r\n * NatSpec: Add support for NatSpec documentation in ``enum`` definitions.\r\n * NatSpec: Add support for NatSpec documentation in ``struct`` definitions.\r\n * NatSpec: Include NatSpec from events that are emitted by a contract but defined outside of it in userdoc and devdoc output.\r\n * Optimizer: Re-implement simplified version of ``UnusedAssignEliminator`` and ``UnusedStoreEliminator``. It can correctly remove some unused assignments in deeply nested loops that were ignored by the old version.\r\n * Parser: Unary plus is no longer recognized as a unary operator in the AST and triggers an error at the parsing stage (rather than later during the analysis).\r\n * SMTChecker: Group all messages about unsupported language features in a single warning. The CLI option ``--model-checker-show-unsupported`` and the JSON option ``settings.modelChecker.showUnsupported`` can be enabled to show the full list.\r\n * SMTChecker: Properties that are proved safe are now reported explicitly at the end of analysis. By default, only the number of safe properties is shown. The CLI option ``--model-checker-show-proved-safe`` and the JSON option ``settings.modelChecker.showProvedSafe`` can be enabled to show the full list of safe properties.\r\n * Standard JSON Interface: Add experimental support for importing ASTs via Standard JSON.\r\n * Yul EVM Code Transform: If available, use ``push0`` instead of ``codesize`` to produce an arbitrary value on stack in order to create equal stack heights between branches.\r\n\r\n\r\n**Bugfixes:**\r\n * ABI: Include events in the ABI that are emitted by a contract but defined outside of it.\r\n * Immutables: Disallow initialization of immutables in try/catch statements.\r\n * SMTChecker: Fix false positives in ternary operators that contain verification targets in its branches, directly or indirectly.\r\n\r\n\r\n**AST Changes:**\r\n * AST: Add the ``internalFunctionIDs`` field to the AST nodes of contracts containing IDs of functions that may be called via the internal dispatch. The field is a map from function AST IDs to internal dispatch function IDs. These IDs are always generated, but they are only used in via-IR code generation.\r\n * AST: Add the ``usedEvents`` field to ``ContractDefinition`` which contains the AST IDs of all events emitted by the contract as well as all events defined and inherited by the contract.\r\n\r\n\r\nWe especially thank all the contributors that made this release possible:\r\n\r\nAlexander Arlt, Alex Beregszaszi, Bhargava Shastry, chriseth, Christian Parpart, Daniel Kirchner, Francois-Rene Rideau, hrkrshnn, Kaan Uzdo\u011fan, Kamil \u015aliwak, Leo Alt, Matheus Aguiar, Michael de Hoog, minaminao, mmqxyz, Nikola Matic, Nuno Santos, Ojas Aklecha, Peter Lemenkov, Rodrigo Q. Saramago, uji, Vaibhaw\r\n\r\nIf you want to perform a source build, please only use [`solidity_0.8.20.tar.gz`](https://github.com/ethereum/solidity/releases/download/v0.8.20/solidity_0.8.20.tar.gz) and not the source archives generated automatically by GitHub."
    },
    {
      "tag_name": "v0.8.19",
      "published_at": "2023-02-22T14:19:40Z",
      "body": "Introducing the newest version of the Solidity Compiler!\r\nWe are excited to announce the latest release of the Solidity Compiler, [Solidity v0.8.19](https://soliditylang.org/blog/2023/02/22/solidity-0.8.19-release-announcement/). \r\nThis latest version includes a range of improvements and, most importantly, [custom operators for user-defined value types](https://blog.soliditylang.org/2023/02/22/user-defined-operators) language feature!\r\nIt also contains a fix for a long-standing bug that can result in code that is only used in creation code to also be included in runtime bytecode.\r\n\r\n### Changelog\r\n**Language Features:**\r\n* Allow defining custom operators for user-defined value types via ``using {f as +} for T global`` syntax.\r\n\r\n\r\n**Compiler Features:**\r\n * SMTChecker: New trusted mode that assumes that any compile-time available code is the actual used code, even in external calls. This can be used via the CLI option ``--model-checker-ext-calls trusted`` or the JSON field ``settings.modelChecker.extCalls: \"trusted\"``.\r\n\r\n\r\n**Bugfixes:**\r\n * Assembler: Avoid duplicating subassembly bytecode where possible.\r\n * Code Generator: Avoid including references to the deployed label of referenced functions if they are called right away.\r\n * ContractLevelChecker: Properly distinguish the case of missing base constructor arguments from having an unimplemented base function.\r\n * SMTChecker: Fix internal error caused by unhandled ``z3`` expressions that come from the solver when bitwise operators are used.\r\n * SMTChecker: Fix internal error when using the custom NatSpec annotation to abstract free functions.\r\n * TypeChecker: Also allow external library functions in ``using for``.\r\n\r\n\r\n**AST Changes:**\r\n * AST: Add ``function`` field to ``UnaryOperation`` and ``BinaryOperation`` AST nodes. ``functionList`` in ``UsingForDirective`` AST nodes will now contain ``operator`` and ``definition`` members instead of ``function`` when the list entry defines an operator.\r\n\r\nWe especially thank all the contributors that made this release possible:\r\n\r\nBhargava Shastry, Daniel Kirchner, Evan Saulpaugh, Jacob Heider, Kamil \u015aliwak, Leo Alt, Matheus Aguiar, Micha\u0142 Janiszewski, Nicol\u00e1s Acosta, Nikola Mati\u0107, Nuno Santos, Pawel Gebal, Peter Lemenkov, Rodrigo Q. Saramago, William Entriken, Zachinquarantine, chriseth, drblessing, minaminao, wechman\r\n\r\nIf you want to perform a source build, please only use [`solidity_0.8.19.tar.gz`](https://github.com/ethereum/solidity/releases/download/v0.8.19/solidity_0.8.19.tar.gz) and not the source archives generated automatically by GitHub."
    },
    {
      "tag_name": "v0.8.18",
      "published_at": "2023-02-01T15:12:04Z",
      "body": "Introducing the newest version of the Solidity Compiler!\r\nWe are excited to announce the latest release of the Solidity Compiler, [Solidity v0.8.18](https://soliditylang.org/blog/2023/02/01/solidity-0.8.18-release-announcement). \r\nThis latest version includes a range of improvements and it also introduces support for the [Paris upgrade](https://blog.ethereum.org/2022/08/24/mainnet-merge-announcement)!\r\n\r\n\r\n### Changelog\r\n**Language Features:**\r\n * Allow named parameters in mapping types.\r\n\r\n\r\n**Compiler Features:**\r\n * Commandline Interface: Add ``--no-cbor-metadata`` that skips CBOR metadata from getting appended at the end of the bytecode.\r\n * Commandline Interface: Return exit code ``2`` on uncaught exceptions.\r\n * EVM: Deprecate ``block.difficulty`` and disallow ``difficulty()`` in inline assembly for EVM versions >= paris. The change is due to the renaming introduced by [EIP-4399](https://eips.ethereum.org/EIPS/eip-4399).\r\n * EVM: Introduce ``block.prevrandao`` in Solidity and ``prevrandao()`` in inline assembly for EVM versions >= paris.\r\n * EVM: Set the default EVM version to \"Paris\".\r\n * EVM: Support for the EVM version \"Paris\".\r\n * Language Server: Add basic document hover support.\r\n * Natspec: Add event Natspec inheritance for devdoc.\r\n * Optimizer: Added optimization rule ``and(shl(X, Y), shl(X, Z)) => shl(X, and(Y, Z))``.\r\n * Parser: More detailed error messages about invalid version pragmas.\r\n * SMTChecker: Make ``z3`` the default solver for the BMC and CHC engines instead of all solvers.\r\n * SMTChecker: Support Eldarica as a Horn solver for the CHC engine when using the CLI option ``--model-checker-solvers eld``. The binary ``eld`` must be available in the system.\r\n * Solidity Upgrade Tool: Remove ``solidity-upgrade`` tool.\r\n * Standard JSON: Add a boolean field ``settings.metadata.appendCBOR`` that skips CBOR metadata from getting appended at the end of the bytecode.\r\n * TypeChecker: Warn when using deprecated builtin ``selfdestruct``.\r\n * Yul EVM Code Transform: Generate more optimal code for user-defined functions that always terminate a transaction. No return labels will be pushed for calls to functions that always terminate.\r\n * Yul Optimizer: Allow replacing the previously hard-coded cleanup sequence by specifying custom steps after a colon delimiter (``:``) in the sequence string.\r\n * Yul Optimizer: Eliminate ``keccak256`` calls if the value was already calculated by a previous call and can be reused.\r\n\r\n\r\n**Bugfixes:**\r\n * Parser: Disallow several ``indexed`` attributes for the same event parameter.\r\n * Parser: Disallow usage of the ``indexed`` attribute for modifier parameters.\r\n * SMTChecker: Fix display error for negative integers that are one more than powers of two.\r\n * SMTChecker: Fix internal error on chain assignments using static fully specified state variables.\r\n * SMTChecker: Fix internal error on multiple wrong SMTChecker natspec entries.\r\n * SMTChecker: Fix internal error when a public library function is called internally.\r\n * SMTChecker: Fix internal error when deleting struct member of function type.\r\n * SMTChecker: Fix internal error when using user-defined types as mapping indices or struct members.\r\n * SMTChecker: Improved readability for large integers that are powers of two or almost powers of two in error messages.\r\n * TypeChecker: Fix bug where private library functions could be attached with ``using for`` outside of their declaration scope.\r\n * Yul Optimizer: Hash hex and decimal literals according to their value instead of their representation, improving the detection of equivalent functions.\r\n\r\nWe especially thank all the contributors that made this release possible:\r\n\r\nAlexander Arlt, Alex Beregszaszi, andy53, Anton Paymyshev, Bhargava Shastry, Big-Aaron, Bojidar00, Bulgantamir Gankhuyag, chriseth, Christian Parpart, ChrisXXXXXXX, Damian Wechman, Daniel Kirchner, Doggo, Duc Thanh Nguyen, Franco Victorio, Franziska Heintel, George Plotnikov, hrkrshnn, Ikko Ashimine, Ishtiaque Zahid, John Kane, Kaan Uzdo\u011fan, Kamil \u015aliwak, Leo Alt, ligi, Lokesh Kumar, Matheus Aguiar, Mathias L. Baumann, Mike Leach, Miles Liu, Minebuu, Mio, Nathaniel Jensen, Nikola Mati\u0107, Nishant Sachdeva, Nuno Santos, omahs, Pawe\u0142 Bylica, Phill, Pierre Grimaud, Prusakova Katya, Rafal Stozek, Rajkumar gaur, Rhythm Bansal, Riley, Rodrigo Q. Saramago, Sabnock, Saw-mon-and-Natalie, Sebastian Supreme, Soham Zemse, Vinay, vlad, William Entriken, Yusuf Benli\r\n\r\nIf you want to perform a source build, please only use [`solidity_0.8.18.tar.gz`](https://github.com/ethereum/solidity/releases/download/v0.8.18/solidity_0.8.18.tar.gz) and not the source archives generated automatically by GitHub.\r\n\r\n**UPDATE 2023-02-02**: The Linux binary originally included here has been rebuilt and replaced due to incompatibility with older Ubuntu releases (Bionic, Focal and earlier). We have recently migrated our CI builds to Ubuntu 22.04, which includes a backwards-incompatible glibc version. Since the Linux binary is not completely static (it dynamically loads Z3 and consequently glibc), it would not run with older glibc when built against newer one. You can find [more details in the release blog post](https://blog.soliditylang.org/2023/02/01/solidity-0.8.18-release-announcement/#update-2023-02-02-rebuilt-linux-binary-for-solidity-0818) and issue #13921.\r\n\r\nTo be clear: both binaries will produce identical outputs under all circumstances, including the commit hash in the metadata. Only the hash of the compiler binary itself will change due to the replacement, but the new binary will always produce byte-identical output.\r\n\r\nThe SHA-256 hash of the old binary was `a1c0f33eb4482c26f56719ecf62b0ee05d7d7a4f8264ffbddf9ebcd9095c32bd`. The new one is\r\n`95e6ed4949a63ad89afb443ecba1fb8302dd2860ee5e9baace3e674a0f48aa77`."
    },
    {
      "tag_name": "v0.8.17",
      "published_at": "2022-09-08T15:25:26Z",
      "body": "This release primarily fixes an [important bug](https://blog.soliditylang.org/2022/09/08/storage-write-removal-before-conditional-termination/), but also involves some improvements in code generation, optimizer and in the language server.\r\n\r\nFor details, please see [the release announcement](https://blog.soliditylang.org/2022/09/08/solidity-0.8.17-release-announcement/).\r\n\r\n\r\n\r\n**Important Bugfixes:**\r\n * Yul Optimizer: Prevent the incorrect removal of storage writes before calls to Yul functions that conditionally terminate the external EVM call.\r\n\r\n\r\n**Compiler Features:**\r\n * Code Generator: More efficient overflow checks for multiplication.\r\n * Language Server: Analyze all files in a project by default (can be customized by setting ``'file-load-strategy'`` to ``'directly-opened-and-on-import'`` in LSP settings object).\r\n * Yul Optimizer: Simplify the starting offset of zero-length operations to zero.\r\n\r\n\r\n**Bugfixes:**\r\n * Type Checker: Fix internal compiler error on tuple assignments with invalid left-hand side.\r\n * Yul IR Code Generation: Fix internal compiler error when accessing the ``.slot`` member of a mapping through a storage reference in inline assembly.\r\n\r\n\r\n**Build System:**\r\n * Allow disabling pedantic warnings and do not treat warnings as errors during compiler build when ``-DPEDANTIC=OFF`` flag is passed to CMake.\r\n * Update emscripten to version 3.1.19.\r\n\r\n\r\n\r\nWe especially thank all the contributors that made this release possible:\r\n\r\n\r\nAlexander Arlt, Bhargava Shastry, Christian Parpart, Damian Wechman, Daniel Kirchner, Duc Thanh Nguyen, Emmanuel Oaikhenan, Francisco Giordano, Kamil \u015aliwak, krakxn, Leonardo Alt, Leonid Pospelov, Luke Hutchison, Luoh Ren-Shan, Matheus Aguiar, Mathias L. Baumann, MeetRajput00, Nikola Mati\u0107, NoFaceDev, Pranay, Roman Figurin, Taylor Ferran, Thanh Tran, Yuvraj Singh, aathan, emmaodia, khue, kuzdogan, minaminao, Nishant Sachdeva, tcoyvwac, xternet\r\n\r\n\r\n\r\nIf you want to perform a source build, please only use `solidity_0.8.17.tar.gz` and not the zip provided by github directly."
    },
    {
      "tag_name": "v0.8.16",
      "published_at": "2022-08-08T13:44:26Z",
      "body": "This release fixes one important bug and contains further minor bug fixes and features.\r\n\r\nFor details, please see [the release announcement](https://blog.soliditylang.org/2022/08/08/solidity-0.8.16-release-announcement/).\r\n\r\n**Important Bugfixes:**\r\n * Code Generation: Fix data corruption that affected ABI-encoding of calldata values represented by tuples: structs at any nesting level; argument lists of external functions, events and errors; return value lists of external functions. The 32 leading bytes of the first dynamically-encoded value in the tuple would get zeroed when the last component contained a statically-encoded array.\r\n\r\n\r\n**Compiler Features:**\r\n * Code Generator: More efficient code for checked addition and subtraction.\r\n * TypeChecker: Support using library constants in initializers of other constants.\r\n * Yul IR Code Generation: Improved copy routines for arrays with packed storage layout.\r\n * Yul Optimizer: Add rule to convert ``mod(add(X, Y), A)`` into ``addmod(X, Y, A)``, if ``A`` is a power of two.\r\n * Yul Optimizer: Add rule to convert ``mod(mul(X, Y), A)`` into ``mulmod(X, Y, A)``, if ``A`` is a power of two.\r\n\r\n\r\n**Bugfixes:**\r\n * Commandline Interface: Disallow the following options outside of the compiler mode: ``--via-ir``,``--metadata-literal``, ``--metadata-hash``, ``--model-checker-show-unproved``, ``--model-checker-div-mod-no-slacks``, ``--model-checker-engine``, ``--model-checker-invariants``, ``--model-checker-solvers``, ``--model-checker-timeout``, ``--model-checker-contracts``, ``--model-checker-targets``.\r\n * Type Checker: Fix compiler crash on tuple assignments involving certain patterns with unary tuples on the left-hand side.\r\n * Type Checker: Fix compiler crash when ``abi.encodeCall`` received a tuple expression instead of an inline tuple.\r\n * Type Checker: Fix null dereference in ``abi.encodeCall`` type checking of free function.\r\n\r\n\r\n\r\nWe especially thank all the contributors that made this release possible:\r\n\r\na3d4, Aiman Baharna, Alex Beregszaszi, Bhargava Shastry, Christian Parpart, Christian Reitwiessner, CJ42, Damian Wechman, Daniel Kirchner, Daniel Lupu, Derek Gottfrid, Duc Thanh Nguyen, Femi Bolaji, Harikrishnan Mulackal, Ishtiaque Zahid, Kamil \u015aliwak, krakxn, Matheus Aguiar, Mathias L. Baumann, Maximiliano Schultheis, Midhun07, minami, Nikola Mati\u0107, Nishant Sachdeva, Quentin Garchery, Richie, Rodrigo Baraglia, Rohit Kumar Suman, Ryan, vdusart, victorknox, William Entriken, ywon0925\r\n\r\n\r\nIf you want to perform a source build, please only use `solidity_0.8.16.tar.gz` and not the zip provided by github directly."
    },
    {
      "tag_name": "v0.8.15",
      "published_at": "2022-06-15T14:54:01Z",
      "body": "This release fixes two important bugs and also contains other minor bug fixes and features.\r\n\r\nFor details, please see [the release announcement](https://blog.soliditylang.org/2022/06/15/solidity-0.8.15-release-announcement/).\r\n\r\n**Important Bugfixes:**\r\n * Code Generation: Avoid writing dirty bytes to storage when copying ``bytes`` arrays.\r\n * Yul Optimizer: Keep all memory side-effects of inline assembly blocks.\r\n\r\n\r\n**Language Features:**\r\n * Add `E.selector` for a non-anonymous event `E` to access the 32-byte selector topic.\r\n\r\n\r\n**Compiler Features:**\r\n * LSP: Add rudimentary support for semantic highlighting.\r\n * Type Checker: Warn about assignments involving multiple pushes to storage ``bytes`` that may invalidate references.\r\n * Yul Optimizer: Improve inlining heuristics for via IR code generation and pure Yul compilation.\r\n\r\n\r\n**Bugfixes:**\r\n * ABI Encoder: When encoding an empty string coming from storage do not add a superfluous empty slot for data.\r\n * Common Subexpression Eliminator: Process assembly items in chunks with maximum size of 2000. It helps to avoid extremely time-consuming searches during code optimization.\r\n * Yul Optimizer: Do not remove ``returndatacopy`` in cases in which it might perform out-of-bounds reads that unconditionally revert as out-of-gas. Previously, any \r\n``returndatacopy`` that wrote to memory that was never read from was removed without accounting for the out-of-bounds condition.\r\n\r\n\r\n\r\n\r\nWe especially thank all the contributors that made this release possible:\r\n\r\nChristian Parpart, Christian Reitwiessner, Damian Wechman, Daniel Kirchner, Denis T, Dustin Alandzes, Harikrishnan Mulackal, Josep M Sobrepere, Kamil \u015aliwak, Matheus Aguiar, Mathias L. Baumann, Nishant Sachdeva, Prajwal Borkar, Ryan, Samuel Osewa, Saw-mon-and-Natalie, shady41, sourabh.xyz, uji, Yuri Victorovich\r\n\r\nIf you want to perform a source build, please only use `solidity_0.8.15.tar.gz` and not the zip provided by github directly."
    },
    {
      "tag_name": "v0.8.14",
      "published_at": "2022-05-17T12:37:12Z",
      "body": "This release fixes two important bugs and also contains other minor bug fixes and features.\r\n\r\nFor details, please see [the release announcement](https://blog.soliditylang.org/2022/05/18/solidity-0.8.14-release-announcement/).\r\n\r\n**Important Bugfixes:**\r\n * ABI Encoder: When ABI-encoding values from calldata that contain nested arrays, correctly validate the nested array length against ``calldatasize()`` in all cases.\r\n * Override Checker: Allow changing data location for parameters only when overriding external functions.\r\n\r\n\r\n**Compiler Features:**\r\n * Assembly-Json Exporter: Include source list in `sourceList` field.\r\n * Commandline Interface: Option ``--pretty-json`` works also with the following options: ``--abi``, ``--asm-json``, ``--ast-compact-json``, ``--devdoc``, ``--storage-layout``, ``--userdoc``.\r\n * Language Server: Allow full filesystem access to language server.\r\n * Peephole Optimizer: Remove operations without side effects before simple terminations.\r\n * SMTChecker: Support ``abi.encodeCall`` taking into account the called selector.\r\n\r\n\r\n**Bugfixes:**\r\n * Assembly-Json Exporter: Fix assembly json export to store jump types of operations in `jumpType` field instead of `value`.\r\n * SMTChecker: Fix ABI compatibility with z3 >=4.8.16.\r\n * SMTChecker: Fix bug when z3 is selected but not available at runtime.\r\n * Type Checker: Properly check restrictions of ``using ... global`` in conjunction with libraries.\r\n * TypeChecker: Convert parameters of function type to how they would be called for ``abi.encodeCall``.\r\n\r\n\r\n\r\nWe especially thank all the contributors that made this release possible:\r\n\r\na3d4, aathan, Aisultan Kali, Alexander Arlt, Alexey Shekhirin, alpharush, andreb0x, Bytecurl, Christian Parpart, Damian Wechman, Daniel Kirchner, dtedesco1, Florian Sey, Hector Roussille, Joshua Quinones, Kamil \u015aliwak, Leo Alt, Matheus Aguiar, Mathias L. Baumann, Nishant Sachdeva, Nobuhiko Otoba, Ryan, sourabh.xyz, Tharun K\r\n\r\n\r\nIf you want to perform a source build, please only use solidity_0.8.14.tar.gz and not the zip provided by github directly."
    },
    {
      "tag_name": "v0.8.13",
      "published_at": "2022-03-16T13:32:43Z",
      "body": "Solidity v0.8.13 fixes an important bug related to ``abi.encodeCall``, extends the ``using for`` directive and implements \"go to definition\" for the language server.\r\n\r\nFurthermore, compiling via the new Yul IR pipeline is now considered production ready.\r\n\r\nFor more details, see [the release announcement](https://blog.soliditylang.org/2022/03/16/solidity-0.8.13-release-announcement/).\r\n\r\n**Important Bugfixes:**\r\n * Code Generator: Correctly encode literals used in ``abi.encodeCall`` in place of fixed bytes arguments.\r\n\r\n\r\n**Language Features:**\r\n * General: Allow annotating inline assembly as memory-safe to allow optimizations and stack limit evasion that rely on respecting Solidity's memory model.\r\n * General: ``using M for Type;`` is allowed at file level and ``M`` can now also be a brace-enclosed list of free functions or library functions.\r\n * General: ``using ... for T global;`` is allowed at file level where the user-defined type ``T`` has been defined, resulting in the effect of the statement being available everywhere ``T`` is available.\r\n\r\n\r\n**Compiler Features:**\r\n * Commandline Interface: Allow the use of ``--via-ir`` in place of ``--experimental-via-ir``.\r\n * Compilation via Yul IR is no longer marked as experimental.\r\n * JSON-AST: Added selector field for errors and events.\r\n * LSP: Implements goto-definition.\r\n * Peephole Optimizer: Optimize comparisons in front of conditional jumps and conditional jumps across a single unconditional jump.\r\n * Yul EVM Code Transform: Avoid unnecessary ``pop``s on terminating control flow.\r\n * Yul Optimizer: Remove ``sstore`` and ``mstore`` operations that are never read from.\r\n\r\n\r\n**Bugfixes:**\r\n * General: Fix internal error for locales with unusual capitalization rules. Locale set in the environment is now completely ignored.\r\n * Type Checker: Fix incorrect type checker errors when importing overloaded functions.\r\n * Yul IR Code Generation: Optimize embedded creation code with correct settings. This fixes potential mismatches between the constructor code of a contract compiled in isolation and the bytecode in ``type(C).creationCode``, resp. the bytecode used for ``new C(...)``.\r\n\r\n\r\nWe especially thank all the contributors that made this release possible:\r\n\r\na3d4, Abdul Karim Moro, Alexander Arlt, Bhargava Shastry, Callis Ezenwaka, Christian Parpart, Daniel Kirchner, david-k, franzihei, hrkrshnn, Kamil \u015aliwak, kanedaaaa, Leo Alt, Marenz, Mate Soos, Nishant Sachdeva, Paarth Madan, Richie, Sleepy, Tyler, wechman, Wes Bouaziz, \r\n\r\n\r\nIf you want to perform a source build, please only use solidity_0.8.13.tar.gz and not the zip provided by github directly."
    },
    {
      "tag_name": "v0.8.12",
      "published_at": "2022-02-16T11:50:24Z",
      "body": "Solidity v0.8.12 improves the javascript/wasm binary and fixes several bugs.\r\n\r\nFor more details, see [the release announcement](https://blog.soliditylang.org/2022/02/16/solidity-0.8.12-release-announcement/).\r\n\r\n**Language Features:**\r\n * General: Add equality-comparison operators for external function types.\r\n * General: Support ``ContractName.functionName`` for ``abi.encodeCall``, in addition to external function pointers.\r\n\r\n\r\n**Compiler Features:**\r\n * Commandline Interface: Event and error signatures are also returned when using ``--hashes``.\r\n * Yul Optimizer: Remove ``mstore`` and ``sstore`` operations if the slot already contains the same value.\r\n * Yul: Emit immutable references for pure yul code when requested.\r\n\r\n\r\n\r\n**Bugfixes:**\r\n * Antlr Grammar: Allow builtin names in ``yulPath`` to support ``.address`` in function pointers.\r\n * Code Generator: Fix internal error when accessing the members of external functions occupying more than two stack slots.\r\n * Code Generator: Fix internal error when doing an explicit conversion from ``string calldata`` to ``bytes``.\r\n * Control Flow Graph: Perform proper virtual lookup for modifiers for uninitialized variable and unreachable code analysis.\r\n * General: ``string.concat`` now properly takes strings as arguments and returns ``string memory``. It was accidentally introduced as a copy of ``bytes.concat`` before.\r\n * Immutables: Fix wrong error when the constructor of a base contract uses ``return`` and the derived contract contains immutable variables.\r\n * Inheritance: Consider functions in all ancestors during override analysis.\r\n * IR Generator: Add missing cleanup during the conversion of fixed bytes types to smaller fixed bytes types.\r\n * IR Generator: Add missing cleanup for indexed event arguments of value type.\r\n * IR Generator: Fix internal error when copying reference types in calldata and storage to struct or array members in memory.\r\n * IR Generator: Fix IR syntax error when copying storage arrays of structs containing functions.\r\n * Natspec: Fix internal error when overriding a struct getter with a Natspec-documented return value and the name in the struct is different.\r\n * Type Checker: Fix internal error when a constant variable declaration forward references a struct.\r\n * Yul EVM Code Transform: Improved stack shuffling in corner cases.\r\n\r\n\r\n**Solc-Js:**\r\n * The wrapper now requires at least nodejs v10.\r\n * The code has been ported to TypeScript.\r\n\r\n\r\n**Build System:**\r\n * Emscripten builds store the embedded WebAssembly binary in LZ4 compressed format and transparently decompress on loading.\r\n\r\nWe especially thank all the contributors that made this release possible:\r\n\r\na3d4, Aleksey Bykhun, Amsavarthan Lv, Ayush Shukla, Bhargava Shastry, Braden Watling, Brien, Bruno Barbieri, Christian Parpart, Daniel Kirchner, Esquith Allen, Franziska Heintel, Hakeem Almidan, Harikrishnan Mulackal, joshieDo, joshuatarkwski, Kamil \u015aliwak, Laurent, Leo Alt, Markus Waas, Mathias L. Baumann, mejsiej, Mohamed Safouen Bouabid, Naveen Sahu, Nikita Stupin, Nishant Sachdeva, Pranay Reddy, Sean Billig, Semar Augusto, William Entriken, yatharthagoenka, Younghoon-Lee.\r\n\r\n\r\nIf you want to perform a source build, please only use solidity_0.8.12.tar.gz and not the zip provided by github directly."
    },
    {
      "tag_name": "v0.8.11",
      "published_at": "2021-12-20T14:45:36Z",
      "body": "Solidity v0.8.11 adds a first implementation of a Language Server, allows a safer way to perform ABI-encoding and fixes several bugs.\r\n\r\nFor more details, see [the release announcement](https://blog.soliditylang.org/2021/12/20/solidity-0.8.11-release-announcement/).\r\n\r\n**Language Features:**\r\n * General: New builtin function ``abi.encodeCall(functionPointer, (arg1, arg2, ...))`` that type-checks the arguments and returns the ABI-encoded function call data.\r\n\r\n\r\n**Compiler Features:**\r\n * Commandline Interface: Add ``--lsp`` option to get ``solc`` to act as a Language Server (LSP) communicating over stdio.\r\n\r\n\r\n**Bugfixes:**\r\n * Code Generator: Fix a crash when using ``@use-src`` and compiling from Yul to ewasm.\r\n * SMTChecker: Fix internal error when an unsafe target is solved more than once and the counterexample messages are different.\r\n * SMTChecker: Fix soundness of assigned storage/memory local pointers that were not erasing enough knowledge.\r\n * Fix internal error when a function has a calldata struct argument with an internal type inside.\r\n * IR Generator: Fix IR syntax error when copying storage arrays of functions.\r\n\r\n\r\nWe especially thank all the contributors that made this release possible:\r\n\r\nKamil \u015aliwak, Leo Alt, nishant-sachdeva, Daniel Kirchner, Marenz, minami, Alessandro Coglio, Alex Beregszaszi, Bhargava Shastry, Dallon Asnes, Dallon Asnes, neel iyer, Christian Parpart, GitHubPang, Mathias Baumann, Omkar Nikhal, Saska Karsi, Tynan Richards, dinah.\r\n\r\nIf you want to perform a source build, please only use solidity_0.8.11.tar.gz and not the zip provided by github directly.\r\n\r\n"
    },
    {
      "tag_name": "v0.8.10",
      "published_at": "2021-11-09T09:42:05Z",
      "body": "Solidity v0.8.10 can now report contract invariants and reentrancy properties through the SMTChecker. It also contains some new optimizations with regards to external function calls and enabled the new EVM code generator for pure Yul mode.\r\n\r\nFor more details, see [the release announcement](https://blog.soliditylang.org/2021/11/09/solidity-0.8.10-release-announcement/).\r\n\r\n\r\n**Language Features:**\r\n * Inline Assembly: Support ``.address`` and ``.selector`` on external function pointers to access their address and function selector.\r\n\r\n\r\n**Compiler Features:**\r\n * Code Generator: Skip existence check for external contract if return data is expected. In this case, the ABI decoder will revert if the contract does not exist.\r\n * Commandline Interface: Accept nested brackets in step sequences passed to ``--yul-optimizations``.\r\n * Commandline Interface: Add ``--debug-info`` option for selecting how much extra debug information should be included in the produced EVM assembly and Yul code.\r\n * Commandline Interface: Support ``--asm``, ``--bin``, ``--ir-optimized``, ``--ewasm`` and ``--ewasm-ir`` output selection options in assembler mode.\r\n * Commandline Interface: Use different colors when printing errors, warnings and infos.\r\n * JSON AST: Set absolute paths of imports earlier, in the ``parsing`` stage.\r\n * SMTChecker: Output values for ``block.*``, ``msg.*`` and ``tx.*`` variables that are present in the called functions.\r\n * SMTChecker: Report contract invariants and reentrancy properties. This can be enabled via the CLI option ``--model-checker-invariants`` or the Standard JSON option ``settings.modelChecker.invariants``.\r\n * Standard JSON: Accept nested brackets in step sequences passed to ``settings.optimizer.details.yulDetails.optimizerSteps``.\r\n * Standard JSON: Add ``settings.debug.debugInfo`` option for selecting how much extra debug information should be included in the produced EVM assembly and Yul code.\r\n * Yul EVM Code Transform: Switch to new optimized code transform when compiling via Yul with enabled optimizer.\r\n * Yul Optimizer: Take control-flow side-effects of user-defined functions into account in various optimizer steps.\r\n\r\n\r\n**Bugfixes:**\r\n * Code Generator: Fix constructor source mappings for immutables.\r\n * Commandline Interface: Disallow ``--error-recovery`` option outside of the compiler mode.\r\n * Commandline Interface: Don't return zero exit code when writing linked files to disk fails.\r\n * Commandline Interface: Fix extra newline character being appended to sources passed through standard input, affecting their hashes.\r\n * Commandline Interface: Report output selection options unsupported by the selected input mode instead of ignoring them.\r\n * Commandline Interface: When linking only accept exact matches for library names passed to the ``--libraries`` option. Library names not prefixed with a file name used to match any library with that name.\r\n * SMTChecker: Fix internal error in magic type access (``block``, ``msg``, ``tx``).\r\n * SMTChecker: Fix internal error in the CHC engine when passing gas in the function options.\r\n * TypeChecker: Fix internal error when using arrays and structs with user defined value types before declaration.\r\n * TypeChecker: Fix internal error when using user defined value types in public library functions.\r\n * TypeChecker: Improved error message for constant variables with (nested) mapping types.\r\n * Yul Assembler: Fix internal error when function names are not unique.\r\n * Yul IR Generator: Do not output empty switches/if-bodies for empty contracts.\r\n\r\n\r\n**Important Bugfixes in Experimental Features:**\r\n * Yul IR Generator: Changes to function return variables referenced in modifier invocation arguments were not properly forwarded if there was more than one return variable.\r\n\r\n\r\n**Build System:**\r\n * Pass linker-only emscripten options only when linking.\r\n * Remove obsolete compatibility workaround for emscripten builds.\r\n * Update emscripten to version 2.0.33.\r\n\r\n\r\nWe especially thank all the contributors that made this release possible:\r\n\r\n4molybdenum2, Adam Bliss, Alex Beregszaszi, Christian Parpart, Daniel Kirchner, David Dzhalaev, Derek Brans, Gyeonghun Park, Harikrishnan Mulackal, Jos\u00e9 L\u00f3pez, Kamil \u015aliwak, Leo Arias, Leonardo Alt, Mariela Mantle, Mathias Baumann, Midhun07, Mikko Ohtamaa, MrBrain295, Saurabh Sharma, sgmoore, shikharvashistha, Shivam Rajput, soroosh-sdi, Sreekesh V, tcoyvwac, TerranCivilian, vowchick, William Entriken, Zachinquarantine\r\n\r\nIf you want to perform a source build, please only use solidity_0.8.10.tar.gz and not the zip provided by github directly.\r\n\r\n"
    },
    {
      "tag_name": "v0.8.9",
      "published_at": "2021-09-29T14:13:14Z",
      "body": "Solidity v0.8.9 is a pure bugfix release and fixes two important, but low severity, bugs.\r\nFor more details, see [the release announcement](https://blog.soliditylang.org/2021/09/29/solidity-0.8.9-release-announcement/).\r\n\r\n**Important Bugfixes:**\r\n * Immutables: Properly perform sign extension on signed immutables.\r\n * User Defined Value Type: Fix storage layout of user defined value types for underlying types shorter than 32 bytes.\r\n\r\n\r\n**Bugfixes:**\r\n * AST: Export ``canonicalName`` for ``UserDefinedValueTypeDefinition`` and ``ContractDefinition``.\r\n\r\n\r\nIf you want to perform a source build, please only use solidity_0.8.9.tar.gz and not the zip provided by github directly."
    },
    {
      "tag_name": "v0.8.8",
      "published_at": "2021-09-27T16:12:56Z",
      "body": "Solidity v0.8.8 introduces user defined value types as a major feature, improves overriding interface functions and reading from immutables. Apart from bugfixes, we also cleaned up the command-line interface and improved the way the\r\nimport mechanism resolves files.\r\n\r\nFor more details, see [the release announcement](https://blog.soliditylang.org/2021/09/27/solidity-0.8.8-release-announcement/).\r\n\r\n**Language Features:**\r\n * Inheritance: A function that overrides only a single interface function does not require the ``override`` specifier.\r\n * Type System: Support ``type(E).min`` and ``type(E).max`` for enums.\r\n * User Defined Value Type: allows creating a zero cost abstraction over a value type with stricter type requirements.\r\n\r\n**Compiler Features:**\r\n * Commandline Interface: Add ``--include-path`` option for specifying extra directories that may contain importable code (e.g. packaged third-party libraries).\r\n * Commandline Interface: Do not implicitly run evm bytecode generation unless needed for the requested output.\r\n * Commandline Interface: Normalize paths specified on the command line and make them relative for files located inside base path and/or include paths.\r\n * Immutable variables can be read at construction time once they are initialized.\r\n * SMTChecker: Add constraints to better correlate ``address(this).balance`` and ``msg.value``.\r\n * SMTChecker: Support constants via modules.\r\n * SMTChecker: Support low level ``call`` as external calls to unknown code.\r\n * SMTChecker: Support the ``value`` option for external function calls.\r\n * SMTChecker: Support user defined value types.\r\n\r\n**Bugfixes:**\r\n * Code Generator: Fix ICE on assigning to calldata structs and statically-sized calldata arrays in inline assembly.\r\n * Code Generator: Use stable source order for ABI functions.\r\n * Commandline Interface: Disallow the ``--experimental-via-ir`` option in Standard JSON, Assembler and Linker modes.\r\n * Commandline Interface: Fix resolution of paths whitelisted with ``--allowed-paths`` or implicitly due to base path, remappings and files being compiled. Correctly handle paths that do not match imports exactly due to being relative, non-normalized or empty.\r\n * Commandline Interface: Report optimizer options as invalid in Standard JSON and linker modes instead of ignoring them.\r\n * Name Resolver: Fix that when importing an aliased symbol using ``import {AliasedName} from \"a.sol\"`` it would use the original name of the symbol and not the aliased one.\r\n * Opcode Optimizer: Prevent the optimizer from running multiple times to avoid potential bytecode differences for referenced code.\r\n * Parser: Properly check for multiple SPDX license identifiers next to each other and validate them.\r\n * SMTChecker: Fix BMC's constraints regarding internal functions.\r\n * SMTChecker: Fix false negative caused by ``push`` on storage array references returned by internal functions.\r\n * SMTChecker: Fix false positive in external calls from constructors.\r\n * SMTChecker: Fix internal error on some multi-source uses of ``abi.*``, cryptographic functions and constants.\r\n * Standard JSON: Fix non-fatal errors in Yul mode being discarded if followed by a fatal error.\r\n * Type Checker: Correct wrong error message in inline assembly complaining about ``.slot`` or ``.offset` not valid when actually ``.length`` was used.\r\n * Type Checker: Disallow modifier declarations and definitions in interfaces.\r\n * Yul Optimizer: Fix a crash in LoadResolver, when ``keccak256`` has particular non-identifier arguments.\r\n\r\n\r\n\r\nWe especially thank all the contributors that made this release possible:\r\n\r\nAhmed Ali, Alessandro Coglio, Alex Beregszaszi, Alexander Arlt, Andrew Lyndem, Basit Raza, benldrmn, Bhargava Shastry, CrimsonGlory, Daniel Kirchner, Harikrishnan Mulackal, hawkess, istareatscreens, John Adler, Kamil \u015aliwak, Leonardo Alt, Marenz, Midhun07, Nikita Stupin, Paul Razvan Berg, priyansh786, Sean Hawkes, soroosh-sdi, Sreekesh V, yatharthagoenka\r\n\r\nIf you want to perform a source build, please only use solidity_0.8.8.tar.gz and not the zip provided by github directly."
    },
    {
      "tag_name": "v0.8.7",
      "published_at": "2021-08-11T12:55:33Z",
      "body": "Solidity v0.8.7 introduces support for the [London upgrade](https://blog.ethereum.org/2021/07/15/london-mainnet-announcement/), includes\r\nvarious improvements to Yul to EVM code transformation, the SMTChecker and some bugfixes.\r\n\r\nFor more details, see [the release announcement](https://blog.soliditylang.org/2021/08/11/solidity-0.8.7-release-announcement/).\r\n\r\n**Language Features:**\r\n * Introduce global ``block.basefee`` for retrieving the base fee of the current block.\r\n * Yul: Introduce builtin ``basefee()`` for retrieving the base fee of the current block.\r\n\r\n\r\n**Compiler Features:**\r\n * AssemblyStack: Also run opcode-based optimizer when compiling Yul code.\r\n * Commandline Interface: option ``--pretty-json`` works also with ``--standard--json``.\r\n * EVM: Set the default EVM version to \"London\".\r\n * SMTChecker: Do not check underflow and overflow by default.\r\n * SMTChecker: Unproved targets are hidden by default, and the SMTChecker only states how many unproved targets there are. They can be listed using the command line option ``--model-checker-show-unproved`` or the JSON option ``settings.modelChecker.showUnproved``.\r\n * SMTChecker: new setting to enable/disable encoding of division and modulo with slack variables. The command line option is ``--model-checker-div-mod-slacks`` and the JSON option is ``settings.modelChecker.divModWithSlacks``.\r\n * Yul EVM Code Transform: Also pop unused argument slots for functions without return variables (under the same restrictions as for functions with return variables).\r\n * Yul EVM Code Transform: Do not reuse stack slots that immediately become unreachable.\r\n * Yul Optimizer: Move function arguments and return variables to memory with the experimental Stack Limit Evader (which is not enabled by default).\r\n\r\n\r\n**Bugfixes:**\r\n * Code Generator: Fix crash when passing an empty string literal to ``bytes.concat()``.\r\n * Code Generator: Fix internal compiler error when calling functions bound to calldata structs and arrays.\r\n * Code Generator: Fix internal compiler error when passing a 32-byte hex literal or a zero literal to ``bytes.concat()`` by disallowing such literals.\r\n * Commandline Interface: Apply ``--optimizer-runs`` option in assembly / yul mode.\r\n * Commandline Interface: Fix crash when a directory path is passed to ``--standard-json``.\r\n * Commandline Interface: Read JSON from standard input when ``--standard-json`` gets ``-`` as a file name.\r\n * Standard JSON: Include source location for errors in files with empty name.\r\n * Type Checker: Fix internal error and prevent static calls to unimplemented modifiers.\r\n * Yul Code Generator: Fix internal compiler error when using a long literal with bitwise negation.\r\n * Yul Code Generator: Fix source location references for calls to builtin functions.\r\n * Yul Parser: Fix source location references for ``if`` statements.\r\n\r\nWe especially thank all the contributors that made this release possible:\r\n\r\nAlex Beregszaszi, Alexander Arlt, Amid Moeinzadeh, Bhargava Shastry, Christian Parpart, CrimsonGlory, Daniel Kirchner, GuLiPing-Hz, Harikrishnan Mulackal, Josu\u00e9, Kamil \u015aliwak, Ladislav Sladecek, Leo Alt, Mathias Baumann, Simon Tian, Tony, chriseth, franzihei, iskanderandrews, jaa2, qedk and t11s.\r\n\r\nIf you want to perform a source build, please only use solidity_0.8.7.tar.gz and not the zip provided by github directly.\r\n"
    },
    {
      "tag_name": "v0.8.6",
      "published_at": "2021-06-22T12:30:35Z",
      "body": "Solidity 0.8.6 fixes some non-critical but annoying bugs, especially a warning about unreachable code that\r\nis in fact reachable.\r\n\r\nFor more details, please see the [release announcement](https://blog.soliditylang.org/2021/06/22/solidity-0.8.6-release-announcement/).\r\n\r\n**Language Features:**\r\n * Yul: Special meaning of ``\".metadata\"`` data object in Yul object.\r\n\r\n**Bugfixes:**\r\n * Control Flow Graph: Fix incorrectly reported unreachable code.\r\n * Solc-Js: When running ``solcjs`` without the ``--optimize`` flag, use ``settings.optimizer.enabled=false`` in Standard JSON instead of omitting the key.\r\n * Standard JSON: Omitting ``settings.optimizer.enabled`` was not equivalent to setting it to ``false``. It meant disabling also the peephole optimizer and jumpdest remover which by default still run with ``enabled=false``.\r\n\r\n\r\n\r\nWe especially thank all the contributors that made this release possible:\r\nAlex Beregszaszi, Allegheny Crypto, axeldelamarre, Djordje Mijovic, hrkrshnn, jgoodall628, Kamil \u015aliwak, Leonardo, Mathias Baumann, patekuru, QQ\u55b5, TaldenV\r\n\r\n\r\nIf you want to perform a source build, please only use solidity_0.8.6.tar.gz and not the zip provided by github directly."
    },
    {
      "tag_name": "v0.8.5",
      "published_at": "2021-06-10T12:02:58Z",
      "body": "Solidity 0.8.5 allows conversions from ``bytes`` to ``bytesNN`` values, adds the ``verbatim`` builtin function to inject\r\narbitrary bytecode in Yul and fixes several smaller bugs.\r\n\r\nFor more details, please see the [release announcement](https://blog.soliditylang.org/2021/06/10/solidity-0.8.5-release-announcement/).\r\n\r\n**Language Features:**\r\n * Allowing conversion from ``bytes`` and ``bytes`` slices to ``bytes1``/.../``bytes32``.\r\n * Yul: Add ``verbatim`` builtin function to inject arbitrary bytecode.\r\n\r\n**Compiler Features:**\r\n * Code Generator: Insert helper functions for panic codes instead of inlining unconditionally. This can reduce costs if many panics (checks) are inserted, but can increase costs where few panics are used.\r\n * EVM: Set the default EVM version to \"Berlin\".\r\n * SMTChecker: Function definitions can be annotated with the custom Natspec tag ``custom:smtchecker abstract-function-nondet`` to be abstracted by a nondeterministic value when called.\r\n * Standard JSON / combined JSON: New artifact \"functionDebugData\" that contains bytecode offsets of entry points of functions and potentially more information in the future.\r\n * Yul Optimizer: Evaluate ``keccak256(a, c)``, when the value at memory location ``a`` is known at compile time and ``c`` is a constant ``<= 32``.\r\n\r\n**Bugfixes:**\r\n * AST: Do not output value of Yul literal if it is not a valid UTF-8 string.\r\n * Code Generator: Fix internal error when function arrays are assigned to storage variables and the function types can be implicitly converted but are not identical.\r\n * Code Generator: Fix internal error when super would have to skip an unimplemented function in the virtual resolution order.\r\n * Control Flow Graph: Assume unimplemented modifiers use a placeholder.\r\n * Control Flow Graph: Take internal calls to functions that always revert into account for reporting unused or unassigned variables.\r\n * Function Call Graph: Fix internal error connected with circular constant references.\r\n * Name Resolver: Do not issue shadowing warning if the shadowing name is not directly accessible.\r\n * Natspec: Allow multiple ``@return`` tags on public state variable documentation.\r\n * SMTChecker: Fix internal error on conversion from ``bytes`` to ``fixed bytes``.\r\n * SMTChecker: Fix internal error on external calls from the constructor.\r\n * SMTChecker: Fix internal error on struct constructor with fixed bytes member initialized with string literal.\r\n * Source Locations: Properly set source location of scoped blocks.\r\n * Standard JSON: Properly allow the ``inliner`` setting under ``settings.optimizer.details``.\r\n * Type Checker: Fix internal compiler error related to having mapping types in constructor parameter for abstract contracts.\r\n * Type Checker: Fix internal compiler error when attempting to use an invalid external function type on pre-byzantium EVMs.\r\n * Type Checker: Fix internal compiler error when overriding receive ether function with one having different parameters during inheritance.\r\n * Type Checker: Make errors about (nested) mapping type in event or error parameter into fatal type errors.\r\n * Type Checker: Fix internal compiler error when overriding an implemented modifier with an unimplemented one.\r\n\r\n**AST Changes:**\r\n * Add member `hexValue` for Yul string and hex literals.\r\n\r\n\r\nWe especially thank all the contributors that made this release possible:\r\na3d4, Alex Beregszaszi, Alexander Arlt, Anurag Dashputre, Bhargava Shastry, Christian Parpart, cxxboy, Daniel Kirchner, \u0110or\u0111e Mijovi\u0107, Franziska Heintel, Harikrishnan Mulackal, Kamil \u015aliwak, Keqi Huang, Leonardo Alt, Martin Blicha, Mathias Baumann, Maurelian, newbateni, Raphael Roullet, TerranCivilian, Wade Dorrell, William Entriken.\r\n\r\nIf you want to perform a source build, please only use solidity_0.8.5.tar.gz and not the zip provided by github directly."
    },
    {
      "tag_name": "v0.8.4",
      "published_at": "2021-04-21T13:51:48Z",
      "body": "Solidity 0.8.4 fixes a bug in the ABI decoder, adds custom structured errors, ``bytes.concat(...)`` and allows more flexible configuration of the SMT checker. For more details, please see the [release announcement](https://blog.soliditylang.org/2021/04/21/solidity-0.8.4-release-announcement/).\r\n\r\nThe release contains an important bugfix.  See [decoding from memory bug](https://blog.soliditylang.org/2021/04/21/decoding-from-memory-bug/) blog post for more details.\r\n\r\nThe release also implements custom errors. See [custom errors](https://blog.soliditylang.org/2021/04/21/custom-errors/) blog post for an introduction.\r\n\r\n**Important Bugfixes:**\r\n * ABI Decoder V2: For two-dimensional arrays and specially crafted data in memory, the result of ``abi.decode`` can depend on data elsewhere in memory. Calldata decoding is not affected.\r\n\r\n\r\n**Language Features:**\r\n * Assembly / Yul: Allow hex string literals.\r\n * Possibility to use ``bytes.concat`` with variable number of ``bytes`` and ``bytesNN`` arguments which behaves as a restricted version of `abi.encodePacked` with a more descriptive name.\r\n * Support custom errors via the ``error`` keyword and introduce the ``revert`` statement.\r\n\r\n\r\n**Compiler Features:**\r\n * Analysis: Properly detect circular references to the bytecode of other contracts across all function calls.\r\n * Commandline Interface: Model checker option ``--model-checker-targets`` also accepts ``outOfBounds``.\r\n * Commandline Interface: New model checker option ``--model-checker-contracts`` allows users to select which contracts should be analyzed as the most derived.\r\n * Low-Level Inliner: Inline ordinary jumps to small blocks and jumps to small blocks that terminate.\r\n * NatSpec: Allow ``@notice`` tag on non-public state variables and local variable declarations. The documentation will only be part of the AST, under the field ``documentation``.\r\n * SMTChecker: Deprecate ``pragma experimental SMTChecker;`` and set default model checker engine to ``none``.\r\n * SMTChecker: Report local variables in CHC counterexamples.\r\n * SMTChecker: Report out of bounds index access for arrays and fixed bytes.\r\n * SMTChecker: Support file level functions and constants.\r\n * Standard JSON: Model checker option ``settings.modelChecker.targets`` also accepts ``outOfBounds``.\r\n * Standard JSON: Model checker option ``settings.modelChecker.targets`` takes an array of string targets instead of string of comma separated targets.\r\n * Standard JSON: New model checker option ``settings.modelChecker.contracts`` allows users to select which contracts should be analyzed as the most derived.\r\n * Yul EVM Code Transform: Stack Optimization: Reuse slots of unused function arguments and defer allocating stack slots for return variables until after expression statements and assignments that do not reference them.\r\n * Yul Optimizer: Added a new step FunctionSpecializer, that specializes a function with its literal arguments.\r\n\r\n\r\n**Bugfixes:**\r\n * Antlr Grammar: Fix parsing of import paths involving properly distinguishing between empty and non-empty string literals in general.\r\n * AST Output: Fix ``kind`` field of ``ModifierInvocation`` for base constructor calls.\r\n * Commandline interface: Fix internal error when printing AST and using ``--base-path`` or ``file://`` prefix in imports.\r\n * Commandline interface: Fix standard input bypassing allowed path checks.\r\n * Natspec: Fix internal error related to the `@returns` documentation for a public state variable overriding a function.\r\n * SMTChecker: Fix false positive and false negative on ``push`` as LHS of a compound assignment.\r\n * SMTChecker: Fix false positive in contracts that cannot be deployed.\r\n * SMTChecker: Fix internal error on public getter returning dynamic data on older EVM versions where these are not available.\r\n * SMTChecker: Fix internal error on try-catch with function call in catch block.\r\n * Type Checker: Fix missing error when events are used without an emit statement.\r\n\r\n\r\n**AST Changes:**\r\n * New property for ``ContractDefinition`` nodes: ``usedErrors`` lists AST IDs of all errors used by the contract (even if defined outside).\r\n\r\n\r\n\r\n\r\nWe especially thank all the contributors that made this release possible:\r\nAlex Beregszaszi, Anurag Dashputre, Behrouz, Bhargava Shastry, Christian Parpart, Daniel Kirchner, \u0110or\u0111e Mijovi\u0107, Feiyang Tan, franzihei, Harikrishnan Mulackal, Hongbo Miao, Kamil \u015aliwak, Leonardo Alt, Martin Blicha, Mathias Baumann, Paul Razvan Berg, Thibaut Schaeffer, zayneio, \r\n\r\nIf you want to perform a source build, please only use solidity_0.8.4.tar.gz and not the zip provided by github directly."
    },
    {
      "tag_name": "v0.8.3",
      "published_at": "2021-03-23T12:35:16Z",
      "body": "Solidity 0.8.3 is a bugfix release that fixes an important bug about how the optimizer handles the Keccak256 opcode.\r\nFor details on the bug, please see the [bug blog post](https://blog.soliditylang.org/2021/03/23/keccak-optimizer-bug/).\r\n\r\nFor a detailed explanation of the new features and changes, please see the [release blog post](https://blog.soliditylang.org/2021/03/23/solidity-0.8.3-release-announcement/).\r\n\r\n**Important Bugfixes:**\r\n * Optimizer: Fix bug on incorrect caching of Keccak-256 hashes.\r\n\r\n**Compiler Features:**\r\n * Command Line Interface: Drop experimental support for ``--machine evm15``.\r\n * Optimizer: Try to move ``and`` with constant inside ``or`` to improve storage writes of small types.\r\n * Optimizer: Replace multiplications and divisions with powers of two by shifts.\r\n\r\n**Bugfixes:**\r\n * AST Import: For constructors, a public visibility is ignored during importing.\r\n * Error Reporter: Fix handling of carriage return.\r\n * SMTChecker: Fix internal error in BMC on resolving virtual functions inside branches.\r\n * SMTChecker: Fix internal error on ``array.pop`` nested inside 1-tuple.\r\n * SMTChecker: Fix internal error on ``FixedBytes`` constant initialized with string literal.\r\n * SMTChecker: Fix internal error on array slices.\r\n * SMTChecker: Fix internal error on calling public getter on a state variable of type array (possibly nested) of structs.\r\n * SMTChecker: Fix internal error on pushing to ``string`` casted to ``bytes``.\r\n * SMTChecker: Fix bug in virtual functions called by constructors.\r\n\r\n**AST Changes:**\r\n * ModifierInvocation: Add ``kind`` field which can be ``modifierInvocation`` or ``baseConstructorSpecifier``.\r\n\r\n\r\nWe especially thank all the contributors that made this release possible:\r\nAlex Beregszaszi, Alexander Arlt, Bhargava Shastry, Daniel Kirchner, Djordje Mijovic, ghidello, Harikrishnan Mulackal, Kamil \u015aliwak, Leonardo Alt, Martin Blicha, Mathias Baumann.\r\n\r\nIf you want to perform a source build, please only use solidity_0.8.3.tar.gz and not the zip provided by github directly."
    },
    {
      "tag_name": "v0.8.2",
      "published_at": "2021-03-02T19:28:44Z",
      "body": "Solidity 0.8.2 adds an optimizer stage that can inline small amounts of code to save gas and\r\nprovides more means to work with code documentation by exporting inline comments\r\nand allowing custom natspec tags.\r\n\r\nFor a detailed explanation of the new features and changes, please see the [blog post](https://blog.soliditylang.org/2021/03/02/solidity-0.8.2-release-announcement/).\r\n\r\n\r\n**Compiler Features:**\r\n * AST: Export NatSpec comments above each statement as their documentation.\r\n * Inline Assembly: Do not warn anymore about variables or functions being shadowed by EVM opcodes.\r\n * NatSpec: Allow and export all tags that start with ``@custom:``.\r\n * NatSpec: Provide source locations for parsing errors.\r\n * Optimizer: Simple inlining when jumping to small blocks that jump again after a few side-effect free opcodes.\r\n\r\n\r\n**Bugfixes:**\r\n * AST: Added ``referencedDeclaration`` for enum members.\r\n * Code Generator: Fix internal error when functions are passed as parameters of other callables, when the function types can be implicitly converted, but not identical.\r\n * Parser: Properly parse ``.address`` in some situations.\r\n * SMTChecker: Fix missing type constraints on block and transaction variables in the deployment phase.\r\n * Type Checker: Fix internal error when override specifier is not a contract.\r\n * Type Checker: Make function-hash collision errors into fatal type errors.\r\n\r\n\r\n**AST Changes:**\r\n * Adds ``nameLocation`` to declarations to represent the exact location of the symbolic name.\r\n * Removed the redundant function type \"bytearraypush\" - replaced by \"arraypush\".\r\n * Support field ``documentation`` to hold NatSpec comments above each statement.\r\n\r\n\r\n\r\n\r\nWe especially thank all the contributors that made this release possible:\r\nAlex Beregszaszi, Alexander Arlt, Bhargava Shastry, Christian Parpart, Daniel Kirchner, dms-yondy, \u0110or\u0111e Mijovi\u0107, DragonDev1906, Franziska Heintel, Harikrishnan Mulackal, Kamil \u015aliwak, Leonardo Alt, Martin Blicha, Mathias Baumann, Mikko Ohtamaa, nora, Rostyslav, \r\nSanad, ssi91"
    },
    {
      "tag_name": "v0.8.1",
      "published_at": "2021-01-27T13:00:27Z",
      "body": "Solidity 0.8.1 introduces many new features for the SMTChecker, updates the emscripten version for building soljson.js to 2.0.12, allows to catch panic errors and adds other small improvements.\r\n\r\nFor a detailed explanation of the new features and changes, please see the [blog post](https://blog.soliditylang.org/2021/01/27/solidity-0.8.1-release-announcement/).\r\n\r\n\r\n**Language Features:**\r\n * Possibility to use ``catch Panic(uint code)`` to catch a panic failure from an external call.\r\n\r\n**Compiler Features:**\r\n * Code Generator: Reduce the cost of ``<address>.code.length`` by using ``extcodesize`` directly.\r\n * Command Line Interface: Allow ``=`` as separator between library name and address in ``--libraries`` commandline option.\r\n * Command Line Interface: New option ``--model-checker-targets`` allows specifying which targets should be checked. The valid options are ``all``, ``constantCondition``, ``underflow``, ``overflow``, ``divByZero``, ``balance``, ``assert``, ``popEmptyArray``, where the default is ``all``. Multiple targets can be chosen at the same time, separated by a comma without spaces: ``underflow,overflow,assert``.\r\n * Command Line Interface: Only accept library addresses with a prefix of ``0x`` in ``--libraries`` commandline option.\r\n * Optimizer: Add rule to replace ``iszero(sub(x,y))`` by ``eq(x,y)``.\r\n * Parser: Report meaningful error if parsing a version pragma failed.\r\n * SMTChecker: Output internal and trusted external function calls in a counterexample's transaction trace.\r\n * SMTChecker: Show ``msg.value`` in counterexample transaction traces when greater than 0.\r\n * SMTChecker: Show contract name in counterexample function call.\r\n * SMTChecker: Support ABI functions as uninterpreted functions.\r\n * SMTChecker: Support try/catch statements.\r\n * SMTChecker: Synthesize untrusted functions called externally.\r\n * SMTChecker: Use checked arithmetic by default and support ``unchecked`` blocks.\r\n * Standard JSON: New option ``modelCheckerSettings.targets`` allows specifying which targets should be checked. The valid options are ``all``, ``constantCondition``, ``underflow``, ``overflow``, ``divByZero``, ``balance``, ``assert``, ``popEmptyArray``, where the default is ``all``. Multiple targets can be chosen at the same time, separated by a comma without spaces: ``underflow,overflow,assert``.\r\n\r\n**Bugfixes:**\r\n * Code Generator: Fix length check when decoding malformed error data in catch clause.\r\n * Control Flow Graph: Fix missing error caused by read from/write to uninitialized variables.\r\n * SMTChecker: Fix false negatives in overriding modifiers and functions.\r\n * SMTChecker: Fix false negatives in the presence of inline assembly.\r\n * SMTChecker: Fix false negatives when analyzing external function calls.\r\n * SMTChecker: Fix internal error on ``block.chainid``.\r\n * SMTChecker: Fix internal error on pushing string literal to ``bytes`` array.\r\n * SMTChecker: Fix missing type constraints for block variables.\r\n * Type Checker: Fix infinite loop when accessing circular constants from inline assembly.\r\n * Type Checker: Fix internal error caused by constant structs containing mappings.\r\n * Type System: Disallow implicit conversion from ``uintN`` to ``intM`` when ``M > N``, and by extension, explicit conversion between the same types is also disallowed.\r\n\r\n**Build System:**\r\n * Update the soljson.js build to emscripten 2.0.12 and boost 1.75.0.\r\n\r\n\r\nWe especially thank all the contributors that made this release possible:\r\n\r\na3d4, Alex Beregszaszi, Alexander Arlt, az1az1, Bhargava Shastry, BinacsLee, Daniel Kirchner, Dmytro, \u0110or\u0111e Mijovi\u0107, Greg Stretton, Harikrishnan Mulackal, Harry Altman, Hui Yu, Kamil \u015aliwak, Leonardo Alt, Martin Blicha, Mathias Baumann, smareasy, \r\nSuriyaa Sundararuban, \r\n\r\n\r\n\r\n\r\nIf you want to perform a source build, please only use solidity_0.8.0.tar.gz and not the zip provided by github directly.\r\n"
    },
    {
      "tag_name": "v0.8.0",
      "published_at": "2020-12-16T17:40:49Z",
      "body": "Solidity 0.8.0 is a breaking release of the Solidity compiler and language. \r\n\r\nFor a detailed explanation of the new features and changes, please see the [blog post](https://blog.soliditylang.org/2020/12/16/solidity-v0.8.0-release-announcement/).\r\n\r\n### Breaking Changes:\r\n* Code Generator: All arithmetic is checked by default. These checks can be disabled using ``unchecked { ... }``.\r\n* Code Generator: Cause a panic if a byte array in storage is accessed whose length is encoded incorrectly.\r\n* Code Generator: Use ``revert`` with error signature ``Panic(uint256)`` and error codes instead of invalid opcode on failing assertions.\r\n* Command Line Interface: JSON fields `abi`, `devdoc`, `userdoc` and `storage-layout` are now sub-objects rather than strings.\r\n* Command Line Interface: Remove the ``--old-reporter`` option.\r\n* Command Line Interface: Remove the legacy ``--ast-json`` option. Only the ``--ast-compact-json`` option is supported now.\r\n* General: Enable ABI coder v2 by default.\r\n* General: Remove global functions ``log0``, ``log1``, ``log2``, ``log3`` and ``log4``.\r\n* Parser: Exponentiation is right associative. ``a**b**c`` is parsed as ``a**(b**c)``.\r\n* Scanner: Remove support for the ``\\b``, ``\\f``, and ``\\v`` escape sequences.\r\n* Standard JSON: Remove the ``legacyAST`` option.\r\n* Type Checker: Function call options can only be given once.\r\n* Type System: Declarations with the name ``this``, ``super`` and ``_`` are disallowed, with the exception of public functions and events.\r\n* Type System: Disallow ``msg.data`` in ``receive()`` function.\r\n* Type System: Disallow ``type(super)``.\r\n* Type System: Disallow enums with more than 256 members.\r\n* Type System: Disallow explicit conversions from negative literals and literals larger than ``type(uint160).max`` to ``address`` type.\r\n* Type System: Disallow the ``byte`` type. It was an alias to ``bytes1``.\r\n* Type System: Explicit conversion to ``address`` type always returns a non-payable ``address`` type. In particular, ``address(u)``, ``address(b)``, ``address(c)`` and ``address(this)`` have the type ``address`` instead of ``address payable`` (Here ``u``, ``b``, and ``c`` are arbitrary variables of type ``uint160``, ``bytes20`` and contract type respectively.)\r\n* Type System: Explicit conversions between two types are disallowed if it changes more than one of sign, width or kind at the same time.\r\n* Type System: Explicit conversions from literals to enums are only allowed if the value fits in the enum.\r\n* Type System: Explicit conversions from literals to integer type is as strict as implicit conversions.\r\n* Type System: Introduce ``address(...).code`` to retrieve the code as ``bytes memory``. The size can be obtained via ``address(...).code.length``, but it will currently always include copying the code.\r\n* Type System: Introduce ``block.chainid`` for retrieving the current chain id.\r\n* Type System: Support ``address(...).codehash`` to retrieve the codehash of an account.\r\n* Type System: The global variables ``tx.origin`` and ``msg.sender`` have type ``address`` instead of ``address payable``.\r\n* Type System: Unary negation can only be used on signed integers, not on unsigned integers.\r\n* View Pure Checker: Mark ``chainid`` as view.\r\n* Yul: Disallow the use of reserved identifiers, such as EVM instructions, even if they are not available in the given dialect / EVM version.\r\n* Yul: The ``assignimmutable`` builtin in the \"EVM with objects\" dialect takes the base offset of the code to modify as an additional argument.\r\n\r\n### Language Features:\r\n* Super constructors can now be called using the member notation e.g. ``M.C(123)``.\r\n\r\n### Bugfixes:\r\n* Type Checker: Perform proper truncating integer arithmetic when using constants in array length expressions.\r\n\r\n### AST Changes:\r\n* New AST Node ``IdentifierPath`` replacing in many places the ``UserDefinedTypeName``.\r\n* New AST Node ``UncheckedBlock`` used for ``unchecked { ... }``.\r\n\r\nWe especially thank all the contributors that made this release possible:\r\n\r\nAlex Beregszaszi, Christian Parpart, Daniel Kirchner, Djordje Mijovic, Harikrishnan Mulackal, Kamil \u015aliwak, Leonardo Alt, Mathias Baumann, ssi91\r\n\r\n\r\n\r\nIf you want to perform a source build, please only use solidity_0.8.0.tar.gz and not the zip provided by github directly.\r\n"
    }
  ],
  "commits_between_sample_dates": [
    {
      "sha": "dafe00677e1ccf04fb4853d74885cfe7288b25e7",
      "message": "ossfuzz uses yul AST instead of separate block and dialect",
      "author": "clonker",
      "date": "2025-03-17T09:56:53Z"
    },
    {
      "sha": "8859625fdeb9a19f538d596d380e0fae28ea108e",
      "message": "yulrun on AST",
      "author": "clonker",
      "date": "2025-03-17T10:02:55Z"
    },
    {
      "sha": "d1cbd8dc3f0bd390669a99c8e036b8d6fd215b89",
      "message": "interpreter uses yul AST instead of separate block and dialect",
      "author": "clonker",
      "date": "2025-03-17T10:02:44Z"
    },
    {
      "sha": "e134620b0e469de9b3a550daf002975b4e40f70f",
      "message": "Merge pull request #15941 from ethereum/asm_analysis_fmt",
      "author": "clonker",
      "date": "2025-03-21T18:05:18Z"
    },
    {
      "sha": "cc58ab164e1ef5e4973c23497e1fcbe40a39e03b",
      "message": "Merge pull request #15895 from kuzdogan/update-metadata-docs",
      "author": "Kamil \u015aliwak",
      "date": "2025-03-21T17:46:29Z"
    },
    {
      "sha": "b9cbf1e7db82b74c1c07801a05f663321889ce26",
      "message": "AsmAnalysis: Improve wording of invalid argument for eofcreate/returncontract error",
      "author": "clonker",
      "date": "2025-03-21T08:17:09Z"
    },
    {
      "sha": "1ccea419e6770553f15ce80872be21165ba946c5",
      "message": "AsmAnalysis: Stronger use of fmt, refactor function call analysis",
      "author": "clonker",
      "date": "2025-03-14T08:24:30Z"
    },
    {
      "sha": "1f044c153365955b48d19ae90fa8a57db359c870",
      "message": "Remove \"sorted\" in std-json remappings docs",
      "author": "Kaan Uzdo\u011fan",
      "date": "2025-03-20T09:29:03Z"
    },
    {
      "sha": "2e33f2557c2c91b59c7d5593389992d7f09b26ba",
      "message": "Update the metdata settings field to refer the rest of the settings to std-json",
      "author": "Kaan Uzdo\u011fan",
      "date": "2025-02-26T23:21:22Z"
    },
    {
      "sha": "d97d7115815314af238de314d710abd4a1aa6868",
      "message": "Update metadata docs for \"libraries\" and \"compilationSettings\" fields",
      "author": "Kaan Uzdo\u011fan",
      "date": "2025-02-26T23:10:25Z"
    },
    {
      "sha": "d07c219930518a4fa33e600029d61e8ecb18dfaf",
      "message": "Merge pull request #15963 from ethereum/smt-fix-string-to-bytes-conversion-with-custom-types",
      "author": "Martin Blicha",
      "date": "2025-03-21T13:07:16Z"
    },
    {
      "sha": "dd03613b791b3d13d43b95e253c414eeeb27c35b",
      "message": "SMTChecker: Fix string literal to fixed bytes conversion with user-defined type",
      "author": "Martin Blicha",
      "date": "2025-03-20T21:26:14Z"
    },
    {
      "sha": "2536b14b47268418ce4330dd0ea758b1a778a028",
      "message": "Merge pull request #15934 from ethereum/default-initialize-instruction-in-assembly-item",
      "author": "clonker",
      "date": "2025-03-21T11:02:27Z"
    },
    {
      "sha": "08c9f535288b0d5a337c9dd416a47333791b41b9",
      "message": "AssemblyItem gets an optional instruction and the null-state is properly asserted",
      "author": "clonker",
      "date": "2025-03-12T15:41:03Z"
    },
    {
      "sha": "28982f13c906998593d7783cc7db50b7ce0078db",
      "message": "Merge pull request #15957 from ethereum/make-peephole-opt-more-opt-friendly",
      "author": "Nikola Mati\u0107",
      "date": "2025-03-21T10:05:29Z"
    },
    {
      "sha": "4a93b2a77222460218201d84b9b7121147c74d5e",
      "message": "Merge pull request #15952 from ethereum/remove_builtin_check_from_inline_asm_mangling",
      "author": "clonker",
      "date": "2025-03-21T07:40:13Z"
    },
    {
      "sha": "098b854ce59393a1ef48e06de6b031a793486508",
      "message": "IRGeneratorForStatements does not check for builtin when mangling user identifiers",
      "author": "clonker",
      "date": "2025-03-17T08:38:07Z"
    },
    {
      "sha": "8f38f2304a69ad73b3800c5d552c2bda9dd8afff",
      "message": "Peephole optimiser: Replace apply methods recursion by folding expression",
      "author": "clonker",
      "date": "2025-03-19T14:45:17Z"
    },
    {
      "sha": "ad281dd66f73beef4ba10f6f72c4a1c9ee09e9d6",
      "message": "Merge pull request #15951 from ethereum/disambiguator_dont_check_for_builtin",
      "author": "clonker",
      "date": "2025-03-20T07:13:02Z"
    },
    {
      "sha": "f2c9eecb46107a6caa1a9604fec7613b027a3d4a",
      "message": "Yul Disambiguator: Don't check for builtins when translating identifiers",
      "author": "clonker",
      "date": "2025-03-17T07:59:15Z"
    },
    {
      "sha": "b53eba3c3a3e7742cbdd8f31c58f455958162838",
      "message": "Merge pull request #15880 from ethereum/smt-fix-contract-selection",
      "author": "Martin Blicha",
      "date": "2025-03-19T13:04:03Z"
    },
    {
      "sha": "25463c564dc18cb98750e49d227901087a32940b",
      "message": "SMTChecker: Fix analysis for selected contracts",
      "author": "Martin Blicha",
      "date": "2025-02-14T11:40:18Z"
    },
    {
      "sha": "9620f4fcd1b5bcb8c467a65ba9e31bbd73580835",
      "message": "Merge pull request #15950 from ethereum/ssacfg_builder_improve_function_call_visitor",
      "author": "clonker",
      "date": "2025-03-18T07:24:24Z"
    },
    {
      "sha": "74cd757be52c658a8eef7a81c62d364ee1921652",
      "message": "SSACFG Builder: Improve function call visitor",
      "author": "clonker",
      "date": "2025-03-17T07:52:34Z"
    },
    {
      "sha": "a65229279d769a7b2936aef2aa802d77abbdc343",
      "message": "Merge pull request #15942 from ethereum/name_dependent_cse_bug_only_asm",
      "author": "Kamil \u015aliwak",
      "date": "2025-03-15T00:52:08Z"
    },
    {
      "sha": "145e281fac9369c920c9628fe4a967f7b71e9193",
      "message": "Name dependent CSE bug: Compare ASM only",
      "author": "clonker",
      "date": "2025-03-12T13:13:23Z"
    },
    {
      "sha": "c8893ec9c852185401814a5126fe90b5dfc6ca09",
      "message": "Merge pull request #15939 from ethereum/release_checklist_remove_double_backticks",
      "author": "Kamil \u015aliwak",
      "date": "2025-03-14T23:38:49Z"
    },
    {
      "sha": "70d344a0e93b299b531cbde369713ae067567688",
      "message": "Remove double backticks from CODING_STYLE.md",
      "author": "Kamil \u015aliwak",
      "date": "2025-03-14T22:55:49Z"
    },
    {
      "sha": "d547bf2b67668bc1fd85cf4c6713c50cf5db5b80",
      "message": "Release checklist: Updates style",
      "author": "clonker",
      "date": "2025-03-14T07:50:53Z"
    },
    {
      "sha": "40a4d5d420006168e6c73a1a27a9159cb0b515f0",
      "message": "Minor spelling fix in external test runners base.py",
      "author": "Ocenka",
      "date": "2025-03-14T12:28:24Z"
    }
  ]
}